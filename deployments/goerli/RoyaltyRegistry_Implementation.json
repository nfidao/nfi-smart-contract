{
  "address": "0xf74334cAb7F776572e59903214F9d93559997CB1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "oldRate",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "newRate",
          "type": "uint96"
        }
      ],
      "name": "DefaultRoyaltyRatePercentageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldFactory",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFactory",
          "type": "address"
        }
      ],
      "name": "ModelFactoryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldReceiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newReceiver",
          "type": "address"
        }
      ],
      "name": "ReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "_royaltyRate",
          "type": "uint96"
        }
      ],
      "name": "RoyaltySetForCollection",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_RATE_ROYALTY",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_newDefaultRate",
          "type": "uint96"
        }
      ],
      "name": "changeDefaultRoyaltyRatePercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newModelFactory",
          "type": "address"
        }
      ],
      "name": "changeModelFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newReceiver",
          "type": "address"
        }
      ],
      "name": "changeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultRoyaltyRatePercentage",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getRoyaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyRatePercentage",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_defaultRateRoyaltyPercentage",
          "type": "uint96"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "modelFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "royaltiesSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        },
        {
          "internalType": "uint96",
          "name": "royaltyRateForCollection",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyRate",
          "type": "uint96"
        }
      ],
      "name": "setRoyaltyRateForCollection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint96[]",
          "name": "_royaltyRates",
          "type": "uint96[]"
        }
      ],
      "name": "setRoyaltyRateForCollections",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba56e6c327398cbb366bde83f101df39e706f5e86e4cef56802892f817aaf2da",
  "receipt": {
    "to": null,
    "from": "0x9af703BDDf6b166B64846599F56b68ada1323b2a",
    "contractAddress": "0xf74334cAb7F776572e59903214F9d93559997CB1",
    "transactionIndex": 1,
    "gasUsed": "1417014",
    "logsBloom": "0x
    "blockHash": "0xe0082acab3a1d7f93b78325b428ff1bede09a35a1c0136911b64061598a5e1d5",
    "transactionHash": "0xba56e6c327398cbb366bde83f101df39e706f5e86e4cef56802892f817aaf2da",
    "logs": [],
    "blockNumber": 7240982,
    "cumulativeGasUsed": "1452676",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "afb833a200fb39288aae457b5e9c2f35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"oldRate\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"newRate\",\"type\":\"uint96\"}],\"name\":\"DefaultRoyaltyRatePercentageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFactory\",\"type\":\"address\"}],\"name\":\"ModelFactoryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newReceiver\",\"type\":\"address\"}],\"name\":\"ReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"_royaltyRate\",\"type\":\"uint96\"}],\"name\":\"RoyaltySetForCollection\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_RATE_ROYALTY\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_newDefaultRate\",\"type\":\"uint96\"}],\"name\":\"changeDefaultRoyaltyRatePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newModelFactory\",\"type\":\"address\"}],\"name\":\"changeModelFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultRoyaltyRatePercentage\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getRoyaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyRatePercentage\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_defaultRateRoyaltyPercentage\",\"type\":\"uint96\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modelFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"royaltiesSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"royaltyRateForCollection\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyRate\",\"type\":\"uint96\"}],\"name\":\"setRoyaltyRateForCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint96[]\",\"name\":\"_royaltyRates\",\"type\":\"uint96[]\"}],\"name\":\"setRoyaltyRateForCollections\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoyaltySetForCollection(address,uint96)\":{\"details\":\"emitted when royalties set for token.\"}},\"kind\":\"dev\",\"methods\":{\"changeDefaultRoyaltyRatePercentage(uint96)\":{\"details\":\"setter for defaultRoyaltyRatePercentage\",\"params\":{\"_newDefaultRate\":\"new default rate for royalty.\"}},\"changeModelFactory(address)\":{\"details\":\"setter for model factory address.\",\"params\":{\"_newModelFactory\":\"new Receiver address\"}},\"changeReceiver(address)\":{\"details\":\"setter for receiver address.\",\"params\":{\"_newReceiver\":\"new Receiver address\"}},\"getRoyaltyInfo(address)\":{\"details\":\"royalty info for specific token / collection.It will return custom rate for the token, otherwise will return the default one.\",\"params\":{\"_token\":\"address of token / collection.\"},\"returns\":{\"_receiver\":\"receiver address.\",\"_royaltyRatePercentage\":\"royalty rate percentage.\"}},\"initialize(address,uint96)\":{\"params\":{\"_defaultRateRoyaltyPercentage\":\"default royalty percentage.\",\"_receiver\":\"receiver address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRoyaltyRateForCollection(address,uint96)\":{\"details\":\"set royalty rate for specific collection. Support multiple set. The length of array between tokens & rates must exactly the same.\",\"params\":{\"_royaltyRate\":\"royalty rate.\",\"_token\":\"token address.\"}},\"setRoyaltyRateForCollections(address[],uint96[])\":{\"details\":\"set royalty rate for specific collection. Support multiple set. The length of array between tokens & rates must exactly the same.\",\"params\":{\"_royaltyRates\":\"array of royalty rates.\",\"_tokens\":\"array of token address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeDefaultRoyaltyRatePercentage(uint96)\":{\"notice\":\"the deafult royalty rate can be 0.\"},\"initialize(address,uint96)\":{\"notice\":\"Initialization for upgradeable contract.\"},\"setRoyaltyRateForCollection(address,uint96)\":{\"notice\":\"the rate will be applied to all of token ids inside the collection.Owner or factory can perform this function call.\"},\"setRoyaltyRateForCollections(address[],uint96[])\":{\"notice\":\"the rate will be applied to all of token ids inside the collection.only owner can call the multiple set.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/royalty/RoyaltyRegistry.sol\":\"RoyaltyRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/royalty/RoyaltyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./RoyaltyStorage.sol\\\";\\n\\ncontract RoyaltyRegistry is RoyaltyStorage {\\n    /// @dev emitted when royalties set for token.\\n    event RoyaltySetForCollection(address indexed _token, uint96 _royaltyRate);\\n\\n    event ReceiverUpdated(address oldReceiver, address newReceiver);\\n\\n    event ModelFactoryUpdated(address oldFactory, address newFactory);\\n\\n    event DefaultRoyaltyRatePercentageUpdated(uint96 oldRate, uint96 newRate);\\n\\n    modifier onlyOwnerOrFactory() {\\n        require(msg.sender == owner() || msg.sender == modelFactory, \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Initialization for upgradeable contract.\\n     *\\n     * @param _receiver receiver address.\\n     * @param _defaultRateRoyaltyPercentage default royalty percentage.\\n     *\\n     */\\n    function initialize(address _receiver, uint96 _defaultRateRoyaltyPercentage) external initializer {\\n        receiver = _receiver;\\n        defaultRoyaltyRatePercentage = _defaultRateRoyaltyPercentage;\\n        __Ownable_init_unchained();\\n    }\\n\\n    /**\\n     * @dev setter for receiver address.\\n     *\\n     * @param _newReceiver new Receiver address\\n     *\\n     */\\n    function changeReceiver(address _newReceiver) external onlyOwner {\\n        require(_newReceiver != address(0), \\\"Invalid address\\\");\\n        address oldReceiver = receiver;\\n        receiver = _newReceiver;\\n\\n        emit ReceiverUpdated(oldReceiver, receiver);\\n    }\\n\\n    /**\\n     * @dev setter for model factory address.\\n     *\\n     * @param _newModelFactory new Receiver address\\n     *\\n     */\\n    function changeModelFactory(address _newModelFactory) external onlyOwner {\\n        require(_newModelFactory != address(0), \\\"Invalid address\\\");\\n        address oldModelFactory = modelFactory;\\n        modelFactory = _newModelFactory;\\n\\n        emit ModelFactoryUpdated(oldModelFactory, modelFactory);\\n    }\\n\\n    /**\\n     * @dev setter for defaultRoyaltyRatePercentage\\n     * @notice the deafult royalty rate can be 0.\\n     *\\n     * @param _newDefaultRate new default rate for royalty.\\n     *\\n     */\\n    function changeDefaultRoyaltyRatePercentage(uint96 _newDefaultRate) external onlyOwner {\\n        require(_newDefaultRate <= MAX_RATE_ROYALTY, \\\"Invalid Rate\\\");\\n        uint96 oldDefaultRoyaltyRatePercentage = defaultRoyaltyRatePercentage;\\n        defaultRoyaltyRatePercentage = _newDefaultRate;\\n\\n        emit DefaultRoyaltyRatePercentageUpdated(oldDefaultRoyaltyRatePercentage, defaultRoyaltyRatePercentage);\\n    }\\n\\n    /**\\n     * @dev set royalty rate for specific collection. Support multiple set. The length of array between tokens & rates must exactly the same.\\n     * @notice the rate will be applied to all of token ids inside the collection.\\n     * @notice only owner can call the multiple set.\\n     *\\n     * @param _tokens array of token address.\\n     * @param _royaltyRates array of royalty rates.\\n     */\\n    function setRoyaltyRateForCollections(address[] calldata _tokens, uint96[] calldata _royaltyRates)\\n        external\\n        onlyOwner\\n    {\\n        require(_tokens.length == _royaltyRates.length, \\\"Mismatch arguments length\\\");\\n\\n        for (uint256 i = 0; i < _tokens.length; i++) {\\n            _setRoyaltyForCollection(_tokens[i], _royaltyRates[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev set royalty rate for specific collection. Support multiple set. The length of array between tokens & rates must exactly the same.\\n     * @notice the rate will be applied to all of token ids inside the collection.\\n     * @notice Owner or factory can perform this function call.\\n     *\\n     * @param _token token address.\\n     * @param _royaltyRate royalty rate.\\n     */\\n    function setRoyaltyRateForCollection(address _token, uint96 _royaltyRate) external onlyOwnerOrFactory {\\n        _setRoyaltyForCollection(_token, _royaltyRate);\\n    }\\n\\n    /**\\n     * @dev internal setter royalty rate for collection.\\n     *\\n     * @param _token token / collection address.\\n     * @param _royaltyRate royalty rate for that particular collection.\\n     */\\n    function _setRoyaltyForCollection(address _token, uint96 _royaltyRate) private {\\n        require(_token != address(0), \\\"Invalid token\\\");\\n        require(_royaltyRate <= MAX_RATE_ROYALTY, \\\"Invalid Rate\\\");\\n\\n        RoyaltySet memory _royaltySet = RoyaltySet({ isSet: true, royaltyRateForCollection: _royaltyRate });\\n\\n        royaltiesSet[_token] = _royaltySet;\\n\\n        emit RoyaltySetForCollection(_token, _royaltyRate);\\n    }\\n\\n    /**\\n     * @dev royalty info for specific token / collection.\\n     * @dev It will return custom rate for the token, otherwise will return the default one.\\n     *\\n     * @param _token address of token / collection.\\n     *\\n     * @return _receiver receiver address.\\n     * @return _royaltyRatePercentage royalty rate percentage.\\n     */\\n    function getRoyaltyInfo(address _token) external view returns (address _receiver, uint96 _royaltyRatePercentage) {\\n        RoyaltySet memory _royaltySet = royaltiesSet[_token];\\n        return (receiver, _royaltySet.isSet ? _royaltySet.royaltyRateForCollection : defaultRoyaltyRatePercentage);\\n    }\\n}\\n\",\"keccak256\":\"0x2aa31d650bf65d1f491d07fcde92827606b1c48636896c55cd9068c3c4a6a07c\",\"license\":\"MIT\"},\"contracts/royalty/RoyaltyStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract RoyaltyStorage is OwnableUpgradeable {\\n    struct RoyaltySet {\\n        bool isSet;\\n        uint96 royaltyRateForCollection;\\n    }\\n\\n    /// @dev storing royalty amount percentages for particular collection.\\n    mapping(address => RoyaltySet) public royaltiesSet;\\n\\n    /// @dev default royalty percentage;\\n    uint96 public defaultRoyaltyRatePercentage;\\n\\n    /// @dev receiver address of royalty.\\n    address public receiver;\\n\\n    /// @dev model factory address.\\n    address public modelFactory;\\n\\n    uint96 public constant MAX_RATE_ROYALTY = 1000;\\n}\\n\",\"keccak256\":\"0x8fbd78bb1115c05d822b1813ef8fd6419db5eb1fdb24d0fbd549638154018c08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506118cc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80637b2e700811610097578063d7ef940911610066578063d7ef94091461024e578063f2a413741461026a578063f2fde38b14610286578063f7260d3e146102a2576100f5565b80637b2e7008146101da5780638ce6467d146101f85780638da5cb5b14610214578063a99421d414610232576100f5565b80633e6425db116100d35780633e6425db1461017a578063547e3f061461019857806365aebd7b146101b4578063715018a6146101d0576100f5565b80630431c7ef146100fa5780631f08b64814610118578063376a06f414610149575b600080fd5b6101026102c0565b60405161010f9190611368565b60405180910390f35b610132600480360381019061012d91906110ee565b6102e6565b6040516101409291906113d5565b60405180910390f35b610163600480360381019061015e91906110ee565b61032f565b6040516101719291906113ac565b60405180910390f35b610182610435565b60405161018f9190611539565b60405180910390f35b6101b260048036038101906101ad91906110ee565b610453565b005b6101ce60048036038101906101c99190611117565b610592565b005b6101d861066d565b005b6101e2610681565b6040516101ef9190611539565b60405180910390f35b610212600480360381019061020d91906111c8565b610687565b005b61021c610797565b6040516102299190611368565b60405180910390f35b61024c60048036038101906102479190611153565b6107c1565b005b610268600480360381019061026391906110ee565b6108dd565b005b610284600480360381019061027f9190611117565b610a1c565b005b6102a0600480360381019061029b91906110ee565b610bce565b005b6102aa610c52565b6040516102b79190611368565b60405180910390f35b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60656020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a90046bffffffffffffffffffffffff16905082565b6000806000606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090506066600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000015161042557606660009054906101000a90046bffffffffffffffffffffffff1661042b565b81602001515b9250925050915091565b606660009054906101000a90046bffffffffffffffffffffffff1681565b61045b610c78565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c290611419565b60405180910390fd5b60006066600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816066600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbda2bcccbfa5ae883ab7d9f03480ab68fe68e9200c9b52c0c47abc21d2c90ec9816066600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610586929190611383565b60405180910390a15050565b61059a610797565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106205750606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065690611439565b60405180910390fd5b6106698282610cf6565b5050565b610675610c78565b61067f6000610ede565b565b6103e881565b61068f610c78565b6103e86bffffffffffffffffffffffff16816bffffffffffffffffffffffff1611156106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e7906114b9565b60405180910390fd5b6000606660009054906101000a90046bffffffffffffffffffffffff16905081606660006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055507f7392c3db674e96a805158bdfac5363922c74a8241afb1eedc887ec13d02f521381606660009054906101000a90046bffffffffffffffffffffffff1660405161078b929190611554565b60405180910390a15050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107c9610c78565b818190508484905014610811576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610808906114f9565b60405180910390fd5b60005b848490508110156108d6576108c385858381811061085b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061087091906110ee565b8484848181106108a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108be91906111c8565b610cf6565b80806108ce9061160d565b915050610814565b5050505050565b6108e5610c78565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90611419565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f51ef4f53c3dd1a65db829ec538a7e8bc41f56ed6e583b5e24e43986223a11ed281606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610a10929190611383565b60405180910390a15050565b60008060019054906101000a900460ff16159050808015610a4d5750600160008054906101000a900460ff1660ff16105b80610a7a5750610a5c30610fa4565b158015610a795750600160008054906101000a900460ff1660ff16145b5b610ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab090611499565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610af6576001600060016101000a81548160ff0219169083151502179055505b826066600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550610b70610fc7565b8015610bc95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610bc091906113fe565b60405180910390a15b505050565b610bd6610c78565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3d90611459565b60405180910390fd5b610c4f81610ede565b50565b6066600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c80611028565b73ffffffffffffffffffffffffffffffffffffffff16610c9e610797565b73ffffffffffffffffffffffffffffffffffffffff1614610cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ceb906114d9565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d90611479565b60405180910390fd5b6103e86bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe906114b9565b60405180910390fd5b60006040518060400160405280600115158152602001836bffffffffffffffffffffffff16815250905080606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050508273ffffffffffffffffffffffffffffffffffffffff167f25b3ff953c8d46ef87728ec49843598f7f7586628c5012d65cbd1c68c156a29883604051610ed19190611539565b60405180910390a2505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100d90611519565b60405180910390fd5b611026611021611028565b610ede565b565b600033905090565b60008135905061103f81611868565b92915050565b60008083601f84011261105757600080fd5b8235905067ffffffffffffffff81111561107057600080fd5b60208301915083602082028301111561108857600080fd5b9250929050565b60008083601f8401126110a157600080fd5b8235905067ffffffffffffffff8111156110ba57600080fd5b6020830191508360208202830111156110d257600080fd5b9250929050565b6000813590506110e88161187f565b92915050565b60006020828403121561110057600080fd5b600061110e84828501611030565b91505092915050565b6000806040838503121561112a57600080fd5b600061113885828601611030565b9250506020611149858286016110d9565b9150509250929050565b6000806000806040858703121561116957600080fd5b600085013567ffffffffffffffff81111561118357600080fd5b61118f87828801611045565b9450945050602085013567ffffffffffffffff8111156111ae57600080fd5b6111ba8782880161108f565b925092505092959194509250565b6000602082840312156111da57600080fd5b60006111e8848285016110d9565b91505092915050565b6111fa8161158e565b82525050565b611209816115a0565b82525050565b611218816115fb565b82525050565b600061122b600f8361157d565b915061123682611685565b602082019050919050565b600061124e600c8361157d565b9150611259826116ae565b602082019050919050565b600061127160268361157d565b915061127c826116d7565b604082019050919050565b6000611294600d8361157d565b915061129f82611726565b602082019050919050565b60006112b7602e8361157d565b91506112c28261174f565b604082019050919050565b60006112da600c8361157d565b91506112e58261179e565b602082019050919050565b60006112fd60208361157d565b9150611308826117c7565b602082019050919050565b600061132060198361157d565b915061132b826117f0565b602082019050919050565b6000611343602b8361157d565b915061134e82611819565b604082019050919050565b611362816115e3565b82525050565b600060208201905061137d60008301846111f1565b92915050565b600060408201905061139860008301856111f1565b6113a560208301846111f1565b9392505050565b60006040820190506113c160008301856111f1565b6113ce6020830184611359565b9392505050565b60006040820190506113ea6000830185611200565b6113f76020830184611359565b9392505050565b6000602082019050611413600083018461120f565b92915050565b600060208201905081810360008301526114328161121e565b9050919050565b6000602082019050818103600083015261145281611241565b9050919050565b6000602082019050818103600083015261147281611264565b9050919050565b6000602082019050818103600083015261149281611287565b9050919050565b600060208201905081810360008301526114b2816112aa565b9050919050565b600060208201905081810360008301526114d2816112cd565b9050919050565b600060208201905081810360008301526114f2816112f0565b9050919050565b6000602082019050818103600083015261151281611313565b9050919050565b6000602082019050818103600083015261153281611336565b9050919050565b600060208201905061154e6000830184611359565b92915050565b60006040820190506115696000830185611359565b6115766020830184611359565b9392505050565b600082825260208201905092915050565b6000611599826115ac565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b6000611606826115d6565b9050919050565b6000611618826115cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561164b5761164a611656565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420746f6b656e00000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f496e76616c696420526174650000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4d69736d6174636820617267756d656e7473206c656e67746800000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6118718161158e565b811461187c57600080fd5b50565b611888816115e3565b811461189357600080fd5b5056fea264697066735822122099632649c1c24178762f2cfca21cf5b239864045d0872d79a4e80d4a6fbc3fb064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80637b2e700811610097578063d7ef940911610066578063d7ef94091461024e578063f2a413741461026a578063f2fde38b14610286578063f7260d3e146102a2576100f5565b80637b2e7008146101da5780638ce6467d146101f85780638da5cb5b14610214578063a99421d414610232576100f5565b80633e6425db116100d35780633e6425db1461017a578063547e3f061461019857806365aebd7b146101b4578063715018a6146101d0576100f5565b80630431c7ef146100fa5780631f08b64814610118578063376a06f414610149575b600080fd5b6101026102c0565b60405161010f9190611368565b60405180910390f35b610132600480360381019061012d91906110ee565b6102e6565b6040516101409291906113d5565b60405180910390f35b610163600480360381019061015e91906110ee565b61032f565b6040516101719291906113ac565b60405180910390f35b610182610435565b60405161018f9190611539565b60405180910390f35b6101b260048036038101906101ad91906110ee565b610453565b005b6101ce60048036038101906101c99190611117565b610592565b005b6101d861066d565b005b6101e2610681565b6040516101ef9190611539565b60405180910390f35b610212600480360381019061020d91906111c8565b610687565b005b61021c610797565b6040516102299190611368565b60405180910390f35b61024c60048036038101906102479190611153565b6107c1565b005b610268600480360381019061026391906110ee565b6108dd565b005b610284600480360381019061027f9190611117565b610a1c565b005b6102a0600480360381019061029b91906110ee565b610bce565b005b6102aa610c52565b6040516102b79190611368565b60405180910390f35b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60656020528060005260406000206000915090508060000160009054906101000a900460ff16908060000160019054906101000a90046bffffffffffffffffffffffff16905082565b6000806000606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff168152505090506066600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816000015161042557606660009054906101000a90046bffffffffffffffffffffffff1661042b565b81602001515b9250925050915091565b606660009054906101000a90046bffffffffffffffffffffffff1681565b61045b610c78565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156104cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c290611419565b60405180910390fd5b60006066600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816066600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fbda2bcccbfa5ae883ab7d9f03480ab68fe68e9200c9b52c0c47abc21d2c90ec9816066600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610586929190611383565b60405180910390a15050565b61059a610797565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806106205750606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61065f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065690611439565b60405180910390fd5b6106698282610cf6565b5050565b610675610c78565b61067f6000610ede565b565b6103e881565b61068f610c78565b6103e86bffffffffffffffffffffffff16816bffffffffffffffffffffffff1611156106f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e7906114b9565b60405180910390fd5b6000606660009054906101000a90046bffffffffffffffffffffffff16905081606660006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055507f7392c3db674e96a805158bdfac5363922c74a8241afb1eedc887ec13d02f521381606660009054906101000a90046bffffffffffffffffffffffff1660405161078b929190611554565b60405180910390a15050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6107c9610c78565b818190508484905014610811576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610808906114f9565b60405180910390fd5b60005b848490508110156108d6576108c385858381811061085b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061087091906110ee565b8484848181106108a9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906108be91906111c8565b610cf6565b80806108ce9061160d565b915050610814565b5050505050565b6108e5610c78565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90611419565b60405180910390fd5b6000606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f51ef4f53c3dd1a65db829ec538a7e8bc41f56ed6e583b5e24e43986223a11ed281606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051610a10929190611383565b60405180910390a15050565b60008060019054906101000a900460ff16159050808015610a4d5750600160008054906101000a900460ff1660ff16105b80610a7a5750610a5c30610fa4565b158015610a795750600160008054906101000a900460ff1660ff16145b5b610ab9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab090611499565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610af6576001600060016101000a81548160ff0219169083151502179055505b826066600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081606660006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550610b70610fc7565b8015610bc95760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610bc091906113fe565b60405180910390a15b505050565b610bd6610c78565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3d90611459565b60405180910390fd5b610c4f81610ede565b50565b6066600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c80611028565b73ffffffffffffffffffffffffffffffffffffffff16610c9e610797565b73ffffffffffffffffffffffffffffffffffffffff1614610cf4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ceb906114d9565b60405180910390fd5b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d90611479565b60405180910390fd5b6103e86bffffffffffffffffffffffff16816bffffffffffffffffffffffff161115610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe906114b9565b60405180910390fd5b60006040518060400160405280600115158152602001836bffffffffffffffffffffffff16815250905080606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055509050508273ffffffffffffffffffffffffffffffffffffffff167f25b3ff953c8d46ef87728ec49843598f7f7586628c5012d65cbd1c68c156a29883604051610ed19190611539565b60405180910390a2505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100d90611519565b60405180910390fd5b611026611021611028565b610ede565b565b600033905090565b60008135905061103f81611868565b92915050565b60008083601f84011261105757600080fd5b8235905067ffffffffffffffff81111561107057600080fd5b60208301915083602082028301111561108857600080fd5b9250929050565b60008083601f8401126110a157600080fd5b8235905067ffffffffffffffff8111156110ba57600080fd5b6020830191508360208202830111156110d257600080fd5b9250929050565b6000813590506110e88161187f565b92915050565b60006020828403121561110057600080fd5b600061110e84828501611030565b91505092915050565b6000806040838503121561112a57600080fd5b600061113885828601611030565b9250506020611149858286016110d9565b9150509250929050565b6000806000806040858703121561116957600080fd5b600085013567ffffffffffffffff81111561118357600080fd5b61118f87828801611045565b9450945050602085013567ffffffffffffffff8111156111ae57600080fd5b6111ba8782880161108f565b925092505092959194509250565b6000602082840312156111da57600080fd5b60006111e8848285016110d9565b91505092915050565b6111fa8161158e565b82525050565b611209816115a0565b82525050565b611218816115fb565b82525050565b600061122b600f8361157d565b915061123682611685565b602082019050919050565b600061124e600c8361157d565b9150611259826116ae565b602082019050919050565b600061127160268361157d565b915061127c826116d7565b604082019050919050565b6000611294600d8361157d565b915061129f82611726565b602082019050919050565b60006112b7602e8361157d565b91506112c28261174f565b604082019050919050565b60006112da600c8361157d565b91506112e58261179e565b602082019050919050565b60006112fd60208361157d565b9150611308826117c7565b602082019050919050565b600061132060198361157d565b915061132b826117f0565b602082019050919050565b6000611343602b8361157d565b915061134e82611819565b604082019050919050565b611362816115e3565b82525050565b600060208201905061137d60008301846111f1565b92915050565b600060408201905061139860008301856111f1565b6113a560208301846111f1565b9392505050565b60006040820190506113c160008301856111f1565b6113ce6020830184611359565b9392505050565b60006040820190506113ea6000830185611200565b6113f76020830184611359565b9392505050565b6000602082019050611413600083018461120f565b92915050565b600060208201905081810360008301526114328161121e565b9050919050565b6000602082019050818103600083015261145281611241565b9050919050565b6000602082019050818103600083015261147281611264565b9050919050565b6000602082019050818103600083015261149281611287565b9050919050565b600060208201905081810360008301526114b2816112aa565b9050919050565b600060208201905081810360008301526114d2816112cd565b9050919050565b600060208201905081810360008301526114f2816112f0565b9050919050565b6000602082019050818103600083015261151281611313565b9050919050565b6000602082019050818103600083015261153281611336565b9050919050565b600060208201905061154e6000830184611359565b92915050565b60006040820190506115696000830185611359565b6115766020830184611359565b9392505050565b600082825260208201905092915050565b6000611599826115ac565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b6000611606826115d6565b9050919050565b6000611618826115cc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561164b5761164a611656565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f556e617574686f72697a65640000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420746f6b656e00000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f496e76616c696420526174650000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4d69736d6174636820617267756d656e7473206c656e67746800000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6118718161158e565b811461187c57600080fd5b50565b611888816115e3565b811461189357600080fd5b5056fea264697066735822122099632649c1c24178762f2cfca21cf5b239864045d0872d79a4e80d4a6fbc3fb064736f6c63430008040033",
  "devdoc": {
    "events": {
      "RoyaltySetForCollection(address,uint96)": {
        "details": "emitted when royalties set for token."
      }
    },
    "kind": "dev",
    "methods": {
      "changeDefaultRoyaltyRatePercentage(uint96)": {
        "details": "setter for defaultRoyaltyRatePercentage",
        "params": {
          "_newDefaultRate": "new default rate for royalty."
        }
      },
      "changeModelFactory(address)": {
        "details": "setter for model factory address.",
        "params": {
          "_newModelFactory": "new Receiver address"
        }
      },
      "changeReceiver(address)": {
        "details": "setter for receiver address.",
        "params": {
          "_newReceiver": "new Receiver address"
        }
      },
      "getRoyaltyInfo(address)": {
        "details": "royalty info for specific token / collection.It will return custom rate for the token, otherwise will return the default one.",
        "params": {
          "_token": "address of token / collection."
        },
        "returns": {
          "_receiver": "receiver address.",
          "_royaltyRatePercentage": "royalty rate percentage."
        }
      },
      "initialize(address,uint96)": {
        "params": {
          "_defaultRateRoyaltyPercentage": "default royalty percentage.",
          "_receiver": "receiver address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRoyaltyRateForCollection(address,uint96)": {
        "details": "set royalty rate for specific collection. Support multiple set. The length of array between tokens & rates must exactly the same.",
        "params": {
          "_royaltyRate": "royalty rate.",
          "_token": "token address."
        }
      },
      "setRoyaltyRateForCollections(address[],uint96[])": {
        "details": "set royalty rate for specific collection. Support multiple set. The length of array between tokens & rates must exactly the same.",
        "params": {
          "_royaltyRates": "array of royalty rates.",
          "_tokens": "array of token address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeDefaultRoyaltyRatePercentage(uint96)": {
        "notice": "the deafult royalty rate can be 0."
      },
      "initialize(address,uint96)": {
        "notice": "Initialization for upgradeable contract."
      },
      "setRoyaltyRateForCollection(address,uint96)": {
        "notice": "the rate will be applied to all of token ids inside the collection.Owner or factory can perform this function call."
      },
      "setRoyaltyRateForCollections(address[],uint96[])": {
        "notice": "the rate will be applied to all of token ids inside the collection.only owner can call the multiple set."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2822,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "royaltiesSet",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_struct(RoyaltySet)2816_storage)"
      },
      {
        "astId": 2825,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "defaultRoyaltyRatePercentage",
        "offset": 0,
        "slot": "102",
        "type": "t_uint96"
      },
      {
        "astId": 2828,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "receiver",
        "offset": 12,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 2831,
        "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
        "label": "modelFactory",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(RoyaltySet)2816_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RoyaltyStorage.RoyaltySet)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltySet)2816_storage"
      },
      "t_struct(RoyaltySet)2816_storage": {
        "encoding": "inplace",
        "label": "struct RoyaltyStorage.RoyaltySet",
        "members": [
          {
            "astId": 2813,
            "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
            "label": "isSet",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2815,
            "contract": "contracts/royalty/RoyaltyRegistry.sol:RoyaltyRegistry",
            "label": "royaltyRateForCollection",
            "offset": 1,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
