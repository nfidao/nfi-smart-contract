{
  "address": "0x0BEB7C525703560F2238eF7C3e3116fc4A1411De",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "modelID",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "modelNFTAddress",
          "type": "address"
        }
      ],
      "name": "NFTCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newAddress",
          "type": "address"
        }
      ],
      "name": "RoyaltyRegistryUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRegistry",
          "type": "address"
        }
      ],
      "name": "changeFactoryRoyaltyRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_modelName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_modelID",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_designer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyReceiver",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "_royaltyRate",
          "type": "uint96"
        },
        {
          "internalType": "uint256",
          "name": "_mintLimit",
          "type": "uint256"
        }
      ],
      "name": "createModelNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryRoyaltyRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltyRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "modelNFTs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcc6f650a86ab3ef18850d4047f85992e570adb6d61670bede9508113bcb7ca68",
  "receipt": {
    "to": null,
    "from": "0x9af703BDDf6b166B64846599F56b68ada1323b2a",
    "contractAddress": "0x0BEB7C525703560F2238eF7C3e3116fc4A1411De",
    "transactionIndex": 23,
    "gasUsed": "2755159",
    "logsBloom": "0x
    "blockHash": "0x6c74e0aca1ea7223d8d4694fad0d1a3883825015a30d445b15ed3310e45472fa",
    "transactionHash": "0xcc6f650a86ab3ef18850d4047f85992e570adb6d61670bede9508113bcb7ca68",
    "logs": [],
    "blockNumber": 7633956,
    "cumulativeGasUsed": "8569844",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ed8e4a737919103b7b7620f508adeefe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"modelID\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"modelNFTAddress\",\"type\":\"address\"}],\"name\":\"NFTCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"RoyaltyRegistryUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"}],\"name\":\"changeFactoryRoyaltyRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_modelName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_modelID\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_designer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyReceiver\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"_royaltyRate\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"_mintLimit\",\"type\":\"uint256\"}],\"name\":\"createModelNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRoyaltyRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"modelNFTs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeFactoryRoyaltyRegistry(address)\":{\"details\":\"Update the royalty registry address.\",\"params\":{\"_royaltyRegistry\":\"new royalty registry address.\"}},\"createModelNFT(string,string,address,address,uint96,uint256)\":{\"details\":\"Create new model NFT smart contract with parameters.\",\"params\":{\"_designer\":\"Address of designer.\",\"_mintLimit\":\"upper limit of minting.\",\"_modelID\":\"ID of model.\",\"_modelName\":\"name of model.\",\"_royaltyRate\":\"royalty Rate\",\"_royaltyReceiver\":\"Address of royalty receiver.\"}},\"initialize(address)\":{\"details\":\"initialization function for proxy.\",\"params\":{\"_royaltyRegistry\":\"royalty registry address.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"factoryRoyaltyRegistry\":{\"details\":\"royalty registry address that store the royalty info.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ModelNFTFactory.sol\":\"ModelNFTFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/common/ERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/common/ERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/IERC2981.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the NFT Royalty Standard, a standardized way to retrieve royalty payment information.\\n *\\n * Royalty information can be specified globally for all token ids via {_setDefaultRoyalty}, and/or individually for\\n * specific token ids via {_setTokenRoyalty}. The latter takes precedence over the first.\\n *\\n * Royalty is specified as a fraction of sale price. {_feeDenominator} is overridable but defaults to 10000, meaning the\\n * fee is specified in basis points by default.\\n *\\n * IMPORTANT: ERC-2981 only specifies a way to signal royalty information and does not enforce its payment. See\\n * https://eips.ethereum.org/EIPS/eip-2981#optional-royalty-payments[Rationale] in the EIP. Marketplaces are expected to\\n * voluntarily pay royalties together with sales, but note that this standard is not yet widely supported.\\n *\\n * _Available since v4.5._\\n */\\nabstract contract ERC2981 is IERC2981, ERC165 {\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint96 royaltyFraction;\\n    }\\n\\n    RoyaltyInfo private _defaultRoyaltyInfo;\\n    mapping(uint256 => RoyaltyInfo) private _tokenRoyaltyInfo;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC2981\\n     */\\n    function royaltyInfo(uint256 _tokenId, uint256 _salePrice) public view virtual override returns (address, uint256) {\\n        RoyaltyInfo memory royalty = _tokenRoyaltyInfo[_tokenId];\\n\\n        if (royalty.receiver == address(0)) {\\n            royalty = _defaultRoyaltyInfo;\\n        }\\n\\n        uint256 royaltyAmount = (_salePrice * royalty.royaltyFraction) / _feeDenominator();\\n\\n        return (royalty.receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev The denominator with which to interpret the fee set in {_setTokenRoyalty} and {_setDefaultRoyalty} as a\\n     * fraction of the sale price. Defaults to 10000 so fees are expressed in basis points, but may be customized by an\\n     * override.\\n     */\\n    function _feeDenominator() internal pure virtual returns (uint96) {\\n        return 10000;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information that all ids in this contract will default to.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setDefaultRoyalty(address receiver, uint96 feeNumerator) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: invalid receiver\\\");\\n\\n        _defaultRoyaltyInfo = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Removes default royalty information.\\n     */\\n    function _deleteDefaultRoyalty() internal virtual {\\n        delete _defaultRoyaltyInfo;\\n    }\\n\\n    /**\\n     * @dev Sets the royalty information for a specific token id, overriding the global default.\\n     *\\n     * Requirements:\\n     *\\n     * - `receiver` cannot be the zero address.\\n     * - `feeNumerator` cannot be greater than the fee denominator.\\n     */\\n    function _setTokenRoyalty(\\n        uint256 tokenId,\\n        address receiver,\\n        uint96 feeNumerator\\n    ) internal virtual {\\n        require(feeNumerator <= _feeDenominator(), \\\"ERC2981: royalty fee will exceed salePrice\\\");\\n        require(receiver != address(0), \\\"ERC2981: Invalid parameters\\\");\\n\\n        _tokenRoyaltyInfo[tokenId] = RoyaltyInfo(receiver, feeNumerator);\\n    }\\n\\n    /**\\n     * @dev Resets royalty information for the token id back to the global default.\\n     */\\n    function _resetTokenRoyalty(uint256 tokenId) internal virtual {\\n        delete _tokenRoyaltyInfo[tokenId];\\n    }\\n}\\n\",\"keccak256\":\"0x9bc4d7eb03c4e87fd5122e03cdff5f60fa360d76925980ad022b2c6fac9876f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ModelNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/common/ERC2981.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"erc721a/contracts/ERC721A.sol\\\";\\nimport \\\"./interfaces/IRoyaltyRegistry.sol\\\";\\n\\n// @author DeDe\\ncontract ModelNFT is ERC2981, ERC721A {\\n    using ECDSA for bytes32;\\n\\n    /// @notice max limit of minting.\\n    uint256 public mintLimit;\\n\\n    // Override the base token URI\\n    string private _baseURIPrefix;\\n\\n    /// @notice the attached designer address to this collection.\\n    address public designer;\\n\\n    /// @dev royalty registry address that store the royalty info.\\n    IRoyaltyRegistry public royaltyRegistry;\\n\\n    /// @dev dedicated to restrict one time minting per address.\\n    mapping(address => bool) public isAddressMinted;\\n\\n    /// @dev dedicated to store the token URI if base URI is not defined.\\n    mapping(uint256 => string) public tokenURIs;\\n\\n    event RoyaltyRegistryUpdated(address indexed _sender, address _oldAddress, address _newAddress);\\n    event BaseUriUpdated(address indexed _sender, string _oldURI, string _newURI);\\n    event DesignerUpdated(address indexed _oldAddress, address _newAddress);\\n\\n    modifier onlyDesigner() {\\n        require(msg.sender == designer, \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        require(msg.sender == manager(), \\\"Unauthorized\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return royaltyRegistry.collectionOwner();\\n    }\\n\\n    function manager() public view returns (address) {\\n        return royaltyRegistry.collectionManager();\\n    }\\n\\n    function authorizedSignerAddress() public view returns (address) {\\n        return royaltyRegistry.collectionAuthorizedSignerAddress();\\n    }\\n\\n    function contractURI() public view returns (string memory) {\\n        return royaltyRegistry.getContractURIForToken();\\n    }\\n\\n    /**\\n     * @dev _rate is put in the 4th position to optimize the gas limit, as in its slot will be packed to the _designer address'\\n     *\\n     * @param _name token Name.\\n     * @param _symbol token Symbol.\\n     * @param _limit max mint limit.\\n     * @param _designer designer address.\\n     * @param _royaltyRegistry royalty receiver address.\\n     */\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _limit,\\n        address _designer,\\n        address _royaltyRegistry\\n    ) ERC721A(_name, _symbol) {\\n        require(Address.isContract(_royaltyRegistry), \\\"Invalid royalty registry address\\\");\\n\\n        mintLimit = _limit;\\n        designer = _designer;\\n        royaltyRegistry = IRoyaltyRegistry(_royaltyRegistry);\\n    }\\n\\n    /**\\n     * @dev override ERC721A tokenURI() function.\\n     *\\n     * @param _tokenId token id.\\n     *\\n     * @return uri string.\\n     */\\n    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {\\n        require(_exists(_tokenId), \\\"Token does not exist\\\");\\n\\n        string memory _tokenURI = tokenURIs[_tokenId];\\n        string memory _base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(_base).length == 0) {\\n            return _tokenURI;\\n        }\\n\\n        // If both are set, concatenate the baseURI and associated tokenURI.\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(_base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(_tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721A, ERC2981) returns (bool) {\\n        return interfaceId == type(IERC2981).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev override function for royaltyInfo ERC2981.\\n     * @dev Will read the royalty rate from registry.\\n     * Current flow does not support for token id unit royalty. Every token id will have the same royalty rate.\\n     * So first param is commented out.\\n     *\\n     * @param _salePrice sale price.\\n     *\\n     * @return receiver address.\\n     * @return royalty amount.\\n     */\\n    function royaltyInfo(\\n        uint256, /*_tokenId*/\\n        uint256 _salePrice\\n    ) public view override returns (address, uint256) {\\n        (address _receiver, uint96 royaltyRate) = royaltyRegistry.getRoyaltyInfo(address(this));\\n\\n        uint256 royaltyAmount = (_salePrice * royaltyRate) / _feeDenominator();\\n\\n        return (_receiver, royaltyAmount);\\n    }\\n\\n    /**\\n     * @dev Getter for the base URI.\\n     *\\n     * @return base URI of the NFT.\\n     */\\n    function baseURI() external view returns (string memory) {\\n        return _baseURI();\\n    }\\n\\n    /**\\n     * @dev Only owner can migrate base URI\\n     *\\n     * @param _newBaseURI new base URi\\n     */\\n    function setBaseURI(string memory _newBaseURI) external onlyManager {\\n        string memory _oldUri = _baseURIPrefix;\\n        _baseURIPrefix = _newBaseURI;\\n        emit BaseUriUpdated(msg.sender, _oldUri, _baseURIPrefix);\\n    }\\n\\n    /**\\n     * @dev Update the royalty registry address.\\n     *\\n     * @param _royaltyRegistry new royalty registry address.\\n     */\\n    function changeRoyaltyRegistry(address _royaltyRegistry) external onlyManager {\\n        require(Address.isContract(_royaltyRegistry), \\\"Invalid address\\\");\\n        address oldRoyaltyRegistry = address(royaltyRegistry);\\n        royaltyRegistry = IRoyaltyRegistry(_royaltyRegistry);\\n        emit RoyaltyRegistryUpdated(msg.sender, oldRoyaltyRegistry, address(royaltyRegistry));\\n    }\\n\\n    /**\\n     * @dev Everybody who has the match salt & signature from signer address, can mint the NFT.\\n     *\\n     * @param _to receiver address of minted token.\\n     * @param _uri uri that will be associated to the minted token id.\\n     * @param _signature signature from authorized signer address.\\n     */\\n    function mint(\\n        address _to,\\n        string memory _uri,\\n        bytes calldata _signature\\n    ) external {\\n        require(!isAddressMinted[msg.sender], \\\"Address has been used\\\");\\n\\n        require(\\n            _isValidSignature(keccak256(abi.encodePacked(msg.sender, _uri, address(this))), _signature),\\n            \\\"Invalid signature\\\"\\n        );\\n\\n        uint256 _totalSupply = totalSupply();\\n\\n        // check if minting is possible\\n        require(_totalSupply < mintLimit, \\\"Maximum limit has been reached\\\");\\n\\n        // Mark address for minting\\n        isAddressMinted[msg.sender] = true;\\n\\n        // mint a token using erc721a\\n        _safeMint(_to, 1);\\n\\n        // set token uri\\n        _setTokenURI(_totalSupply, _uri);\\n    }\\n\\n    /**\\n     * @notice Setter for designer address.\\n     * @dev Can be called only by the current designer.\\n     *\\n     * @param _designer new designer address.\\n     */\\n    function setDesigner(address _designer) external onlyDesigner {\\n        require(_designer != address(0), \\\"Invalid address\\\");\\n        address oldDesignerAddress = designer;\\n        designer = _designer;\\n\\n        emit DesignerUpdated(oldDesignerAddress, designer);\\n    }\\n\\n    /**\\n     * @dev Verify hashed data.\\n     * @param _hash Hashed data bundle\\n     * @param _signature Signature to check hash against\\n     * @return bool Is signature valid or not\\n     */\\n    function _isValidSignature(bytes32 _hash, bytes memory _signature) internal view returns (bool) {\\n        bytes32 signedHash = _hash.toEthSignedMessageHash();\\n        return signedHash.recover(_signature) == authorizedSignerAddress();\\n    }\\n\\n    /**\\n     * @return base uri that is set in the storage.\\n     */\\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseURIPrefix;\\n    }\\n\\n    /**\\n     * @dev Define _setTokenURI() function similar to ERC721URIStorage\\n     *\\n     * @param _tokenId token id.\\n     * @param _tokenURI token uri that will be associated to the token id.\\n     */\\n    function _setTokenURI(uint256 _tokenId, string memory _tokenURI) private {\\n        tokenURIs[_tokenId] = _tokenURI;\\n    }\\n}\\n\",\"keccak256\":\"0x3f4d55482e9e46b81f0a9f0091747ae908e489cee7a40448acb40f26c6114a65\",\"license\":\"MIT\"},\"contracts/ModelNFTFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ModelNFT.sol\\\";\\nimport \\\"./interfaces/IRoyaltyRegistry.sol\\\";\\n\\ncontract ModelNFTFactory is OwnableUpgradeable {\\n    // Instantiate NFT contract\\n    ModelNFT private _modelNFT;\\n\\n    mapping(string => address) public modelNFTs;\\n\\n    /// @dev royalty registry address that store the royalty info.\\n    IRoyaltyRegistry public factoryRoyaltyRegistry;\\n\\n    // Event\\n    event NFTCreated(string indexed modelID, address modelNFTAddress);\\n    event RoyaltyRegistryUpdated(address indexed _sender, address _oldAddress, address _newAddress);\\n\\n    /**\\n     * @dev initialization function for proxy.\\n     *\\n     * @param _royaltyRegistry royalty registry address.\\n     */\\n    function initialize(address _royaltyRegistry) external initializer {\\n        require(_royaltyRegistry != address(0), \\\"Invalid royalty address\\\");\\n        factoryRoyaltyRegistry = IRoyaltyRegistry(_royaltyRegistry);\\n        __Ownable_init_unchained();\\n    }\\n\\n    /**\\n     * @dev Update the royalty registry address.\\n     *\\n     * @param _royaltyRegistry new royalty registry address.\\n     */\\n    function changeFactoryRoyaltyRegistry(address _royaltyRegistry) external onlyOwner {\\n        require(_royaltyRegistry != address(0), \\\"Invalid address\\\");\\n        address oldRoyaltyRegistry = address(factoryRoyaltyRegistry);\\n        factoryRoyaltyRegistry = IRoyaltyRegistry(_royaltyRegistry);\\n        emit RoyaltyRegistryUpdated(msg.sender, oldRoyaltyRegistry, address(factoryRoyaltyRegistry));\\n    }\\n\\n    /**\\n     * @dev Create new model NFT smart contract with parameters.\\n     * @param _modelName name of model.\\n     * @param _modelID ID of model.\\n     * @param _designer Address of designer.\\n     * @param _royaltyReceiver Address of royalty receiver.\\n     * @param _royaltyRate royalty Rate\\n     * @param _mintLimit upper limit of minting.\\n     */\\n    function createModelNFT(\\n        string memory _modelName,\\n        string memory _modelID,\\n        address _designer,\\n        address _royaltyReceiver,\\n        uint96 _royaltyRate,\\n        uint256 _mintLimit\\n    ) external {\\n        require(_mintLimit > 0, \\\"Invalid mint limit\\\");\\n        require(modelNFTs[_modelID] == address(0), \\\"Model ID has been used\\\");\\n        require(_designer != address(0), \\\"Invalid designer address\\\");\\n        require(_royaltyReceiver != address(0), \\\"Invalid royalty receiver address\\\");\\n\\n        _modelNFT = new ModelNFT(\\n            _modelName,\\n            _modelID,\\n            _mintLimit,\\n            _designer,\\n            address(factoryRoyaltyRegistry)\\n        );\\n\\n        modelNFTs[_modelID] = address(_modelNFT);\\n\\n        factoryRoyaltyRegistry.setRoyaltyRateForCollection(address(_modelNFT), _royaltyRate, _royaltyReceiver);\\n\\n        emit NFTCreated(_modelID, address(_modelNFT));\\n    }\\n}\\n\",\"keccak256\":\"0x80934d8b7d5da9e97f6da9ecafe363438fe9eddff5c604e1b98763c8ffe0a02a\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IRoyaltyRegistry {\\n    function getRoyaltyInfo(address _token) external view returns (address _receiver, uint96 _royaltyRatePercentage);\\n\\n    function setRoyaltyRateForCollection(\\n        address _token,\\n        uint96 _royaltyRate,\\n        address _royaltyReceiver\\n    ) external;\\n\\n    function collectionManager() external view returns(address);\\n\\n    function collectionAuthorizedSignerAddress() external view returns(address);\\n\\n    function collectionOwner() external view returns(address);\\n\\n    function getContractURIForToken() external view returns(string calldata);\\n}\\n\",\"keccak256\":\"0x4b2cdb76fdcc92d5016d768d289cab64bb601edf3b92b021d328d0331607521e\",\"license\":\"MIT\"},\"erc721a/contracts/ERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.1.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\nimport './IERC721A.sol';\\n\\n/**\\n * @dev ERC721 token receiver interface.\\n */\\ninterface ERC721A__IERC721Receiver {\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n * including the Metadata extension. Built to optimize for lower gas during batch mints.\\n *\\n * Assumes serials are sequentially minted starting at `_startTokenId()`\\n * (defaults to 0, e.g. 0, 1, 2, 3..).\\n *\\n * Assumes that an owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\\n *\\n * Assumes that the maximum token id cannot exceed 2**256 - 1 (max value of uint256).\\n */\\ncontract ERC721A is IERC721A {\\n    // Mask of an entry in packed address data.\\n    uint256 private constant BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\\n\\n    // The bit position of `numberMinted` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_MINTED = 64;\\n\\n    // The bit position of `numberBurned` in packed address data.\\n    uint256 private constant BITPOS_NUMBER_BURNED = 128;\\n\\n    // The bit position of `aux` in packed address data.\\n    uint256 private constant BITPOS_AUX = 192;\\n\\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\\n    uint256 private constant BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\\n\\n    // The bit position of `startTimestamp` in packed ownership.\\n    uint256 private constant BITPOS_START_TIMESTAMP = 160;\\n\\n    // The bit mask of the `burned` bit in packed ownership.\\n    uint256 private constant BITMASK_BURNED = 1 << 224;\\n\\n    // The bit position of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITPOS_NEXT_INITIALIZED = 225;\\n\\n    // The bit mask of the `nextInitialized` bit in packed ownership.\\n    uint256 private constant BITMASK_NEXT_INITIALIZED = 1 << 225;\\n\\n    // The bit position of `extraData` in packed ownership.\\n    uint256 private constant BITPOS_EXTRA_DATA = 232;\\n\\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\\n    uint256 private constant BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\\n\\n    // The mask of the lower 160 bits for addresses.\\n    uint256 private constant BITMASK_ADDRESS = (1 << 160) - 1;\\n\\n    // The maximum `quantity` that can be minted with `_mintERC2309`.\\n    // This limit is to prevent overflows on the address data entries.\\n    // For a limit of 5000, a total of 3.689e15 calls to `_mintERC2309`\\n    // is required to cause an overflow, which is unrealistic.\\n    uint256 private constant MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\\n\\n    // The tokenId of the next token to be minted.\\n    uint256 private _currentIndex;\\n\\n    // The number of tokens burned.\\n    uint256 private _burnCounter;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to ownership details\\n    // An empty struct value does not necessarily mean the token is unowned.\\n    // See `_packedOwnershipOf` implementation for details.\\n    //\\n    // Bits Layout:\\n    // - [0..159]   `addr`\\n    // - [160..223] `startTimestamp`\\n    // - [224]      `burned`\\n    // - [225]      `nextInitialized`\\n    // - [232..255] `extraData`\\n    mapping(uint256 => uint256) private _packedOwnerships;\\n\\n    // Mapping owner address to address data.\\n    //\\n    // Bits Layout:\\n    // - [0..63]    `balance`\\n    // - [64..127]  `numberMinted`\\n    // - [128..191] `numberBurned`\\n    // - [192..255] `aux`\\n    mapping(address => uint256) private _packedAddressData;\\n\\n    // Mapping from token ID to approved address.\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _currentIndex = _startTokenId();\\n    }\\n\\n    /**\\n     * @dev Returns the starting token ID.\\n     * To change the starting token ID, please override this function.\\n     */\\n    function _startTokenId() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Returns the next token ID to be minted.\\n     */\\n    function _nextTokenId() internal view returns (uint256) {\\n        return _currentIndex;\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see `_totalMinted`.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        // Counter underflow is impossible as _burnCounter cannot be incremented\\n        // more than `_currentIndex - _startTokenId()` times.\\n        unchecked {\\n            return _currentIndex - _burnCounter - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens minted in the contract.\\n     */\\n    function _totalMinted() internal view returns (uint256) {\\n        // Counter underflow is impossible as _currentIndex does not decrement,\\n        // and it is initialized to `_startTokenId()`\\n        unchecked {\\n            return _currentIndex - _startTokenId();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total number of tokens burned.\\n     */\\n    function _totalBurned() internal view returns (uint256) {\\n        return _burnCounter;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        // The interface IDs are constants representing the first 4 bytes of the XOR of\\n        // all function selectors in the interface. See: https://eips.ethereum.org/EIPS/eip-165\\n        // e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`\\n        return\\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\\n        return _packedAddressData[owner] & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens minted by `owner`.\\n     */\\n    function _numberMinted(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_MINTED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the number of tokens burned by or on behalf of `owner`.\\n     */\\n    function _numberBurned(address owner) internal view returns (uint256) {\\n        return (_packedAddressData[owner] >> BITPOS_NUMBER_BURNED) & BITMASK_ADDRESS_DATA_ENTRY;\\n    }\\n\\n    /**\\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     */\\n    function _getAux(address owner) internal view returns (uint64) {\\n        return uint64(_packedAddressData[owner] >> BITPOS_AUX);\\n    }\\n\\n    /**\\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\\n     * If there are multiple variables, please pack them into a uint64.\\n     */\\n    function _setAux(address owner, uint64 aux) internal {\\n        uint256 packed = _packedAddressData[owner];\\n        uint256 auxCasted;\\n        // Cast `aux` with assembly to avoid redundant masking.\\n        assembly {\\n            auxCasted := aux\\n        }\\n        packed = (packed & BITMASK_AUX_COMPLEMENT) | (auxCasted << BITPOS_AUX);\\n        _packedAddressData[owner] = packed;\\n    }\\n\\n    /**\\n     * Returns the packed ownership data of `tokenId`.\\n     */\\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\\n        uint256 curr = tokenId;\\n\\n        unchecked {\\n            if (_startTokenId() <= curr)\\n                if (curr < _currentIndex) {\\n                    uint256 packed = _packedOwnerships[curr];\\n                    // If not burned.\\n                    if (packed & BITMASK_BURNED == 0) {\\n                        // Invariant:\\n                        // There will always be an ownership that has an address and is not burned\\n                        // before an ownership that does not have an address and is not burned.\\n                        // Hence, curr will not underflow.\\n                        //\\n                        // We can directly compare the packed value.\\n                        // If the address is zero, packed is zero.\\n                        while (packed == 0) {\\n                            packed = _packedOwnerships[--curr];\\n                        }\\n                        return packed;\\n                    }\\n                }\\n        }\\n        revert OwnerQueryForNonexistentToken();\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct from `packed`.\\n     */\\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\\n        ownership.addr = address(uint160(packed));\\n        ownership.startTimestamp = uint64(packed >> BITPOS_START_TIMESTAMP);\\n        ownership.burned = packed & BITMASK_BURNED != 0;\\n        ownership.extraData = uint24(packed >> BITPOS_EXTRA_DATA);\\n    }\\n\\n    /**\\n     * Returns the unpacked `TokenOwnership` struct at `index`.\\n     */\\n    function _ownershipAt(uint256 index) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnerships[index]);\\n    }\\n\\n    /**\\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\\n     */\\n    function _initializeOwnershipAt(uint256 index) internal {\\n        if (_packedOwnerships[index] == 0) {\\n            _packedOwnerships[index] = _packedOwnershipOf(index);\\n        }\\n    }\\n\\n    /**\\n     * Gas spent here starts off proportional to the maximum mint batch size.\\n     * It gradually moves to O(1) as tokens get transferred around in the collection over time.\\n     */\\n    function _ownershipOf(uint256 tokenId) internal view returns (TokenOwnership memory) {\\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\\n    }\\n\\n    /**\\n     * @dev Packs ownership data into a single uint256.\\n     */\\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\\n        assembly {\\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            owner := and(owner, BITMASK_ADDRESS)\\n            // `owner | (block.timestamp << BITPOS_START_TIMESTAMP) | flags`.\\n            result := or(owner, or(shl(BITPOS_START_TIMESTAMP, timestamp()), flags))\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view override returns (address) {\\n        return address(uint160(_packedOwnershipOf(tokenId)));\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, it can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return '';\\n    }\\n\\n    /**\\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\\n     */\\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\\n        // For branchless setting of the `nextInitialized` flag.\\n        assembly {\\n            // `(quantity == 1) << BITPOS_NEXT_INITIALIZED`.\\n            result := shl(BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ownerOf(tokenId);\\n\\n        if (_msgSenderERC721A() != owner)\\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\\n                revert ApprovalCallerNotOwnerNorApproved();\\n            }\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view override returns (address) {\\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\\n\\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, '');\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        transferFrom(from, to, tokenId);\\n        if (to.code.length != 0)\\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            }\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        return\\n            _startTokenId() <= tokenId &&\\n            tokenId < _currentIndex && // If within bounds,\\n            _packedOwnerships[tokenId] & BITMASK_BURNED == 0; // and not burned.\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\\n     */\\n    function _safeMint(address to, uint256 quantity) internal {\\n        _safeMint(to, quantity, '');\\n    }\\n\\n    /**\\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement\\n     *   {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * See {_mint}.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 quantity,\\n        bytes memory _data\\n    ) internal {\\n        _mint(to, quantity);\\n\\n        unchecked {\\n            if (to.code.length != 0) {\\n                uint256 end = _currentIndex;\\n                uint256 index = end - quantity;\\n                do {\\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\\n                        revert TransferToNonERC721ReceiverImplementer();\\n                    }\\n                } while (index < end);\\n                // Reentrancy protection.\\n                if (_currentIndex != end) revert();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {Transfer} event for each mint.\\n     */\\n    function _mint(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are incredibly unrealistic.\\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\\n        // `tokenId` has a maximum limit of 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            uint256 tokenId = startTokenId;\\n            uint256 end = startTokenId + quantity;\\n            do {\\n                emit Transfer(address(0), to, tokenId++);\\n            } while (tokenId < end);\\n\\n            _currentIndex = end;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Mints `quantity` tokens and transfers them to `to`.\\n     *\\n     * This function is intended for efficient minting only during contract creation.\\n     *\\n     * It emits only one {ConsecutiveTransfer} as defined in\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\\n     * instead of a sequence of {Transfer} event(s).\\n     *\\n     * Calling this function outside of contract creation WILL make your contract\\n     * non-compliant with the ERC721 standard.\\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `quantity` must be greater than 0.\\n     *\\n     * Emits a {ConsecutiveTransfer} event.\\n     */\\n    function _mintERC2309(address to, uint256 quantity) internal {\\n        uint256 startTokenId = _currentIndex;\\n        if (to == address(0)) revert MintToZeroAddress();\\n        if (quantity == 0) revert MintZeroQuantity();\\n        if (quantity > MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\\n\\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\\n\\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\\n        unchecked {\\n            // Updates:\\n            // - `balance += quantity`.\\n            // - `numberMinted += quantity`.\\n            //\\n            // We can directly add to the `balance` and `numberMinted`.\\n            _packedAddressData[to] += quantity * ((1 << BITPOS_NUMBER_MINTED) | 1);\\n\\n            // Updates:\\n            // - `address` to the owner.\\n            // - `startTimestamp` to the timestamp of minting.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `quantity == 1`.\\n            _packedOwnerships[startTokenId] = _packOwnershipData(\\n                to,\\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\\n            );\\n\\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\\n\\n            _currentIndex = startTokenId + quantity;\\n        }\\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\\n    }\\n\\n    /**\\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\\n     */\\n    function _getApprovedAddress(uint256 tokenId)\\n        private\\n        view\\n        returns (uint256 approvedAddressSlot, address approvedAddress)\\n    {\\n        mapping(uint256 => address) storage tokenApprovalsPtr = _tokenApprovals;\\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId]`.\\n        assembly {\\n            // Compute the slot.\\n            mstore(0x00, tokenId)\\n            mstore(0x20, tokenApprovalsPtr.slot)\\n            approvedAddressSlot := keccak256(0x00, 0x40)\\n            // Load the slot's value from storage.\\n            approvedAddress := sload(approvedAddressSlot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the `approvedAddress` is equals to `from` or `msgSender`.\\n     */\\n    function _isOwnerOrApproved(\\n        address approvedAddress,\\n        address from,\\n        address msgSender\\n    ) private pure returns (bool result) {\\n        assembly {\\n            // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            from := and(from, BITMASK_ADDRESS)\\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\\n            msgSender := and(msgSender, BITMASK_ADDRESS)\\n            // `msgSender == from || msgSender == approvedAddress`.\\n            result := or(eq(msgSender, from), eq(msgSender, approvedAddress))\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\\n\\n        // The nested ifs save around 20+ gas over a compound boolean condition.\\n        if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n\\n        if (to == address(0)) revert TransferToZeroAddress();\\n\\n        _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as tokenId would have to be 2**256.\\n        unchecked {\\n            // We can directly increment and decrement the balances.\\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\\n\\n            // Updates:\\n            // - `address` to the next owner.\\n            // - `startTimestamp` to the timestamp of transfering.\\n            // - `burned` to `false`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                to,\\n                BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n        _afterTokenTransfers(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Equivalent to `_burn(tokenId, false)`.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        _burn(tokenId, false);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\\n\\n        address from = address(uint160(prevOwnershipPacked));\\n\\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedAddress(tokenId);\\n\\n        if (approvalCheck) {\\n            // The nested ifs save around 20+ gas over a compound boolean condition.\\n            if (!_isOwnerOrApproved(approvedAddress, from, _msgSenderERC721A()))\\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\\n        }\\n\\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Clear approvals from the previous owner.\\n        assembly {\\n            if approvedAddress {\\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\\n                sstore(approvedAddressSlot, 0)\\n            }\\n        }\\n\\n        // Underflow of the sender's balance is impossible because we check for\\n        // ownership above and the recipient's balance can't realistically overflow.\\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\\n        unchecked {\\n            // Updates:\\n            // - `balance -= 1`.\\n            // - `numberBurned += 1`.\\n            //\\n            // We can directly decrement the balance, and increment the number burned.\\n            // This is equivalent to `packed -= 1; packed += 1 << BITPOS_NUMBER_BURNED;`.\\n            _packedAddressData[from] += (1 << BITPOS_NUMBER_BURNED) - 1;\\n\\n            // Updates:\\n            // - `address` to the last owner.\\n            // - `startTimestamp` to the timestamp of burning.\\n            // - `burned` to `true`.\\n            // - `nextInitialized` to `true`.\\n            _packedOwnerships[tokenId] = _packOwnershipData(\\n                from,\\n                (BITMASK_BURNED | BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\\n            );\\n\\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\\n            if (prevOwnershipPacked & BITMASK_NEXT_INITIALIZED == 0) {\\n                uint256 nextTokenId = tokenId + 1;\\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\\n                if (_packedOwnerships[nextTokenId] == 0) {\\n                    // If the next slot is within bounds.\\n                    if (nextTokenId != _currentIndex) {\\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\\n                    }\\n                }\\n            }\\n        }\\n\\n        emit Transfer(from, address(0), tokenId);\\n        _afterTokenTransfers(from, address(0), tokenId, 1);\\n\\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\\n        unchecked {\\n            _burnCounter++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkContractOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\\n            bytes4 retval\\n        ) {\\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n            if (reason.length == 0) {\\n                revert TransferToNonERC721ReceiverImplementer();\\n            } else {\\n                assembly {\\n                    revert(add(32, reason), mload(reason))\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Directly sets the extra data for the ownership data `index`.\\n     */\\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal {\\n        uint256 packed = _packedOwnerships[index];\\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\\n        uint256 extraDataCasted;\\n        // Cast `extraData` with assembly to avoid redundant masking.\\n        assembly {\\n            extraDataCasted := extraData\\n        }\\n        packed = (packed & BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << BITPOS_EXTRA_DATA);\\n        _packedOwnerships[index] = packed;\\n    }\\n\\n    /**\\n     * @dev Returns the next extra data for the packed ownership data.\\n     * The returned result is shifted into position.\\n     */\\n    function _nextExtraData(\\n        address from,\\n        address to,\\n        uint256 prevOwnershipPacked\\n    ) private view returns (uint256) {\\n        uint24 extraData = uint24(prevOwnershipPacked >> BITPOS_EXTRA_DATA);\\n        return uint256(_extraData(from, to, extraData)) << BITPOS_EXTRA_DATA;\\n    }\\n\\n    /**\\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\\n     * Intended to be overridden by the cosumer contract.\\n     *\\n     * `previousExtraData` - the value of `extraData` before transfer.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _extraData(\\n        address from,\\n        address to,\\n        uint24 previousExtraData\\n    ) internal view virtual returns (uint24) {}\\n\\n    /**\\n     * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred.\\n     * This includes minting.\\n     * And also called before burning one token.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, `tokenId` will be burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _beforeTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after a set of serially-ordered token ids have been transferred.\\n     * This includes minting.\\n     * And also called after one token has been burned.\\n     *\\n     * startTokenId - the first token id to be transferred\\n     * quantity - the amount to be transferred\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` has been minted for `to`.\\n     * - When `to` is zero, `tokenId` has been burned by `from`.\\n     * - `from` and `to` are never both zero.\\n     */\\n    function _afterTokenTransfers(\\n        address from,\\n        address to,\\n        uint256 startTokenId,\\n        uint256 quantity\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Returns the message sender (defaults to `msg.sender`).\\n     *\\n     * If you are writing GSN compatible contracts, you need to override this function.\\n     */\\n    function _msgSenderERC721A() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function _toString(uint256 value) internal pure returns (string memory ptr) {\\n        assembly {\\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\\n            // but we allocate 128 bytes to keep the free memory pointer 32-byte word aliged.\\n            // We will need 1 32-byte word to store the length,\\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 32 + 3 * 32 = 128.\\n            ptr := add(mload(0x40), 128)\\n            // Update the free memory pointer to allocate.\\n            mstore(0x40, ptr)\\n\\n            // Cache the end of the memory to calculate the length later.\\n            let end := ptr\\n\\n            // We write the string from the rightmost digit to the leftmost digit.\\n            // The following is essentially a do-while loop that also handles the zero case.\\n            // Costs a bit more than early returning for the zero case,\\n            // but cheaper in terms of deployment and overall runtime costs.\\n            for {\\n                // Initialize and perform the first pass without check.\\n                let temp := value\\n                // Move the pointer 1 byte leftwards to point to an empty character slot.\\n                ptr := sub(ptr, 1)\\n                // Write the character to the pointer. 48 is the ASCII index of '0'.\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n                temp := div(temp, 10)\\n            } temp {\\n                // Keep dividing `temp` until zero.\\n                temp := div(temp, 10)\\n            } {\\n                // Body of the for loop.\\n                ptr := sub(ptr, 1)\\n                mstore8(ptr, add(48, mod(temp, 10)))\\n            }\\n\\n            let length := sub(end, ptr)\\n            // Move the pointer 32 bytes leftwards to make room for the length.\\n            ptr := sub(ptr, 32)\\n            // Store the length.\\n            mstore(ptr, length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x53cbf7665c255e8eef7581b7b81baee6561880463969ba2bb1bfd475db79fc65\",\"license\":\"MIT\"},\"erc721a/contracts/IERC721A.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.1.0\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of an ERC721A compliant contract.\\n */\\ninterface IERC721A {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * The caller cannot approve to their own address.\\n     */\\n    error ApproveToCaller();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Keeps track of the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set through `_extraData`.\\n        uint24 extraData;\\n    }\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     *\\n     * Burned tokens are calculated here, use `_totalMinted()` if you want to count just minted tokens.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // ==============================\\n    //            IERC165\\n    // ==============================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // ==============================\\n    //            IERC721\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // ==============================\\n    //        IERC721Metadata\\n    // ==============================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // ==============================\\n    //            IERC2309\\n    // ==============================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId` (inclusive) is transferred from `from` to `to`,\\n     * as defined in the ERC2309 standard. See `_mintERC2309` for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\",\"keccak256\":\"0x14469c33c8a3ba9a3627c02ec94dcd9f7f3d6d540f89ea37a358f625058eb309\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506130ea806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000935760003560e01c80638da5cb5b11620000625780638da5cb5b1462000102578063c4d66de81462000114578063df9ce002146200012b578063f2fde38b146200016257600080fd5b806333eaa20c14620000985780634356bd9e14620000c857806344ae70d814620000e1578063715018a614620000f8575b600080fd5b606754620000ac906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b620000df620000d936600462000932565b62000179565b005b620000df620000f236600462000995565b62000234565b620000df6200052d565b6033546001600160a01b0316620000ac565b620000df6200012536600462000932565b62000545565b620000ac6200013c36600462000956565b80516020818301810180516066825292820191909301209152546001600160a01b031681565b620000df6200017336600462000932565b620006d3565b6200018362000752565b6001600160a01b038116620001d15760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064015b60405180910390fd5b606780546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f59f321e63e0bdeefb4c7efac954b9e53e8f069d9b1f6b8ac3ad03c7178b5efa5910160405180910390a25050565b600081116200027b5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081b5a5b9d081b1a5b5a5d60721b6044820152606401620001c8565b60006001600160a01b031660668660405162000298919062000a7e565b908152604051908190036020019020546001600160a01b031614620002f95760405162461bcd60e51b8152602060048201526016602482015275135bd9195b081251081a185cc81899595b881d5cd95960521b6044820152606401620001c8565b6001600160a01b038416620003515760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642064657369676e6572206164647265737300000000000000006044820152606401620001c8565b6001600160a01b038316620003a95760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420726f79616c747920726563656976657220616464726573736044820152606401620001c8565b85858286606760009054906101000a90046001600160a01b0316604051620003d19062000878565b620003e195949392919062000a9c565b604051809103906000f080158015620003fe573d6000803e3d6000fd5b50606580546001600160a01b0319166001600160a01b039290921691821790556040516066906200043190889062000a7e565b90815260405190819003602001812080546001600160a01b039384166001600160a01b031990911617905560675460655463647a5c8560e01b8352831660048301526bffffffffffffffffffffffff8516602483015285831660448301529091169063647a5c8590606401600060405180830381600087803b158015620004b757600080fd5b505af1158015620004cc573d6000803e3d6000fd5b5050505084604051620004e0919062000a7e565b6040519081900381206065546001600160a01b03168252907fe6248a7d8f06d4dc9c3d4c896b3462838d9c7422ecf0b07df2de587aca9ebab29060200160405180910390a2505050505050565b6200053762000752565b620005436000620007ae565b565b600054610100900460ff1615808015620005665750600054600160ff909116105b80620005825750303b15801562000582575060005460ff166001145b620005e75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620001c8565b6000805460ff1916600117905580156200060b576000805461ff0019166101001790555b6001600160a01b038216620006635760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420726f79616c747920616464726573730000000000000000006044820152606401620001c8565b606780546001600160a01b0319166001600160a01b0384161790556200068862000800565b8015620006cf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b620006dd62000752565b6001600160a01b038116620007445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001c8565b6200074f81620007ae565b50565b6033546001600160a01b03163314620005435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001c8565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166200086d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401620001c8565b6200054333620007ae565b61257e8062000b3783390190565b80356001600160a01b03811681146200089e57600080fd5b919050565b600082601f830112620008b4578081fd5b813567ffffffffffffffff80821115620008d257620008d262000b20565b604051601f8301601f19908116603f01168101908282118183101715620008fd57620008fd62000b20565b8160405283815286602085880101111562000916578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121562000944578081fd5b6200094f8262000886565b9392505050565b60006020828403121562000968578081fd5b813567ffffffffffffffff8111156200097f578182fd5b6200098d84828501620008a3565b949350505050565b60008060008060008060c08789031215620009ae578182fd5b863567ffffffffffffffff80821115620009c6578384fd5b620009d48a838b01620008a3565b97506020890135915080821115620009ea578384fd5b50620009f989828a01620008a3565b95505062000a0a6040880162000886565b935062000a1a6060880162000886565b925060808701356bffffffffffffffffffffffff8116811462000a3b578283fd5b8092505060a087013590509295509295509295565b6000815180845262000a6a81602086016020860162000aed565b601f01601f19169290920160200192915050565b6000825162000a9281846020870162000aed565b9190910192915050565b60a08152600062000ab160a083018862000a50565b828103602084015262000ac5818862000a50565b604084019690965250506001600160a01b039283166060820152911660809091015292915050565b60005b8381101562000b0a57818101518382015260200162000af0565b8381111562000b1a576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b506040516200257e3803806200257e833981016040819052620000349162000295565b8451859085906200004d9060049060208501906200011f565b508051620000639060059060208401906200011f565b506000600281905550505062000084816200011060201b620011851760201c565b620000d55760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420726f79616c74792072656769737472792061646472657373604482015260640160405180910390fd5b600a92909255600c80546001600160a01b039283166001600160a01b031991821617909155600d8054929093169116179055506200037e9050565b6001600160a01b03163b151590565b8280546200012d906200032b565b90600052602060002090601f0160209004810192826200015157600085556200019c565b82601f106200016c57805160ff19168380011785556200019c565b828001600101855582156200019c579182015b828111156200019c5782518255916020019190600101906200017f565b50620001aa929150620001ae565b5090565b5b80821115620001aa5760008155600101620001af565b80516001600160a01b0381168114620001dd57600080fd5b919050565b600082601f830112620001f3578081fd5b81516001600160401b038082111562000210576200021062000368565b604051601f8301601f19908116603f011681019082821181831017156200023b576200023b62000368565b8160405283815260209250868385880101111562000257578485fd5b8491505b838210156200027a57858201830151818301840152908201906200025b565b838211156200028b57848385830101525b9695505050505050565b600080600080600060a08688031215620002ad578081fd5b85516001600160401b0380821115620002c4578283fd5b620002d289838a01620001e2565b96506020880151915080821115620002e8578283fd5b50620002f788828901620001e2565b945050604086015192506200030f60608701620001c5565b91506200031f60808701620001c5565b90509295509295909350565b600181811c908216806200034057607f821691505b602082108114156200036257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6121f0806200038e6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063a2bde876116100a2578063c87b56dd11610071578063c87b56dd146103d1578063ce9c751c146103e4578063e8a3d485146103f7578063e985e9c5146103ff57600080fd5b8063a2bde87614610375578063afc6ef6014610388578063b88d4fde146103ab578063c1b0e91f146103be57600080fd5b806395d89b41116100de57806395d89b411461033e578063996517cf14610346578063a11b07121461034f578063a22cb4651461036257600080fd5b806370a08231146103105780638d75533f146103235780638da5cb5b1461033657600080fd5b806342842e0e116101715780636352211e1161014b5780636352211e146102da578063699bff80146102ed5780636c0360eb146102f55780636c8b703f146102fd57600080fd5b806342842e0e146102ac578063481c6a75146102bf57806355f804b3146102c757600080fd5b8063095ea7b3116101ad578063095ea7b31461023c57806318160ddd1461025157806323b872dd146102675780632a55205a1461027a57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611d65565b61043b565b60405190151581526020015b60405180910390f35b610204610466565b6040516101f39190611f57565b61022461021f366004611e43565b6104f8565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611d01565b61053c565b005b600354600254035b6040519081526020016101f3565b61024f610275366004611b75565b6105dc565b61028d610288366004611e5b565b61076d565b604080516001600160a01b0390931683526020830191909152016101f3565b61024f6102ba366004611b75565b610837565b610224610857565b61024f6102d5366004611d9d565b6108d9565b6102246102e8366004611e43565b610a07565b610224610a12565b610204610a57565b61020461030b366004611e43565b610a61565b61025961031e366004611b05565b610afb565b61024f610331366004611c63565b610b4a565b610224610ce7565b610204610d2c565b610259600a5481565b600d54610224906001600160a01b031681565b61024f610370366004611c32565b610d3b565b600c54610224906001600160a01b031681565b6101e7610396366004611b05565b600e6020526000908152604090205460ff1681565b61024f6103b9366004611bb5565b610dd1565b61024f6103cc366004611b05565b610e1b565b6102046103df366004611e43565b610ee0565b61024f6103f2366004611b05565b611027565b610204611104565b6101e761040d366004611b3d565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663152a902d60e11b1480610460575061046082611194565b92915050565b60606004805461047590612128565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190612128565b80156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b5050505050905090565b6000610503826111e2565b610520576040516333d1c03960e21b815260040160405180910390fd5b506000908152600860205260409020546001600160a01b031690565b600061054782610a07565b9050336001600160a01b0382161461058057610563813361040d565b610580576040516367d9dca160e11b815260040160405180910390fd5b60008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006105e78261120a565b9050836001600160a01b0316816001600160a01b03161461061a5760405162a1148160e81b815260040160405180910390fd5b60008281526008602052604090208054338082146001600160a01b038816909114176106675761064a863361040d565b61066757604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661068e57604051633a954ecd60e21b815260040160405180910390fd5b801561069957600082555b6001600160a01b038681166000908152600760205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260066020526040902055600160e11b831661072457600184016000818152600660205260409020546107225760025481146107225760008181526006602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b600d54604051630dda81bd60e21b81523060048201526000918291829182916001600160a01b039091169063376a06f490602401604080518083038186803b1580156107b857600080fd5b505afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190611d2c565b9150915060006107ff61271090565b6001600160601b0316826001600160601b03168761081d91906120dd565b61082791906120bd565b92945091925050505b9250929050565b61085283838360405180602001604052806000815250610dd1565b505050565b600d5460408051639fdf846960e01b815290516000926001600160a01b031691639fdf8469916004808301926020929190829003018186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190611b21565b905090565b6108e1610857565b6001600160a01b0316336001600160a01b03161461091a5760405162461bcd60e51b815260040161091190612026565b60405180910390fd5b6000600b805461092990612128565b80601f016020809104026020016040519081016040528092919081815260200182805461095590612128565b80156109a25780601f10610977576101008083540402835291602001916109a2565b820191906000526020600020905b81548152906001019060200180831161098557829003601f168201915b505085519394506109be93600b93506020870192509050611a0f565b50336001600160a01b03167f8e35157d9201b105014f0dd31c15c7476a6e82fab53da589eeb184e4927a5d4282600b6040516109fb929190611f6a565b60405180910390a25050565b60006104608261120a565b600d54604080516356c2756560e11b815290516000926001600160a01b03169163ad84eaca916004808301926020929190829003018186803b15801561089c57600080fd5b60606108d4611272565b600f6020526000908152604090208054610a7a90612128565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa690612128565b8015610af35780601f10610ac857610100808354040283529160200191610af3565b820191906000526020600020905b815481529060010190602001808311610ad657829003601f168201915b505050505081565b60006001600160a01b038216610b24576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526007602052604090205467ffffffffffffffff1690565b336000908152600e602052604090205460ff1615610ba25760405162461bcd60e51b81526020600482015260156024820152741059191c995cdcc81a185cc81899595b881d5cd959605a1b6044820152606401610911565b610c0c338430604051602001610bba93929190611ea8565b6040516020818303038152906040528051906020012083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061128192505050565b610c4c5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610911565b6000610c5b6003546002540390565b9050600a548110610cae5760405162461bcd60e51b815260206004820152601e60248201527f4d6178696d756d206c696d697420686173206265656e207265616368656400006044820152606401610911565b336000908152600e60205260409020805460ff19166001908117909155610cd690869061130a565b610ce08185611328565b5050505050565b600d546040805163df727d3b60e01b815290516000926001600160a01b03169163df727d3b916004808301926020929190829003018186803b15801561089c57600080fd5b60606005805461047590612128565b6001600160a01b038216331415610d655760405163b06307db60e01b815260040160405180910390fd5b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ddc8484846105dc565b6001600160a01b0383163b15610e1557610df884848484611347565b610e15576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b600c546001600160a01b03163314610e455760405162461bcd60e51b815260040161091190612026565b6001600160a01b038116610e8d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610911565b600c80546001600160a01b038381166001600160a01b031983168117909355604051928352169081907fe4a71635009c69af0c606c5d16f7ccaaf06ff0d5d072216bd8f030383dde9e61906020016109fb565b6060610eeb826111e2565b610f2e5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610911565b6000828152600f602052604081208054610f4790612128565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7390612128565b8015610fc05780601f10610f9557610100808354040283529160200191610fc0565b820191906000526020600020905b815481529060010190602001808311610fa357829003601f168201915b505050505090506000610fd1611272565b9050805160001415610fe4575092915050565b815115611016578082604051602001610ffe929190611eeb565b60405160208183030381529060405292505050919050565b61101f8461143e565b949350505050565b61102f610857565b6001600160a01b0316336001600160a01b03161461105f5760405162461bcd60e51b815260040161091190612026565b6001600160a01b0381163b6110a85760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610911565b600d80546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f59f321e63e0bdeefb4c7efac954b9e53e8f069d9b1f6b8ac3ad03c7178b5efa591016109fb565b600d5460408051635af72f4760e01b815290516060926001600160a01b031691635af72f47916004808301926000929190829003018186803b15801561114957600080fd5b505afa15801561115d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d49190810190611dd0565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b0319831614806111c557506380ac58cd60e01b6001600160e01b03198316145b806104605750506001600160e01b031916635b5e139f60e01b1490565b600060025482108015610460575050600090815260066020526040902054600160e01b161590565b60008160025481101561125957600081815260066020526040902054600160e01b8116611257575b80611250575060001901600081815260066020526040902054611232565b9392505050565b505b604051636f96cda160e11b815260040160405180910390fd5b6060600b805461047590612128565b6000806112db846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506112e5610a12565b6001600160a01b03166112f882856114c2565b6001600160a01b031614949350505050565b6113248282604051806020016040528060008152506114e6565b5050565b6000828152600f60209081526040909120825161085292840190611a0f565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061137c903390899088908890600401611f1a565b602060405180830381600087803b15801561139657600080fd5b505af19250505080156113c6575060408051601f3d908101601f191682019092526113c391810190611d81565b60015b611421573d8080156113f4576040519150601f19603f3d011682016040523d82523d6000602084013e6113f9565b606091505b508051611419576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6060611449826111e2565b61146657604051630a14c4b560e41b815260040160405180910390fd5b6000611470611272565b90508051600014156114915760405180602001604052806000815250611250565b8061149b8461154c565b6040516020016114ac929190611eeb565b6040516020818303038152906040529392505050565b60008060006114d1858561159b565b915091506114de81611608565b509392505050565b6114f0838361180c565b6001600160a01b0383163b15610852576002548281035b61151a6000868380600101945086611347565b611537576040516368d2bf6b60e11b815260040160405180910390fd5b818110611507578160025414610ce057600080fd5b604080516080810191829052607f0190826030600a8206018353600a90045b801561158957600183039250600a81066030018353600a900461156b565b50819003601f19909101908152919050565b6000808251604114156115d25760208301516040840151606085015160001a6115c6878285856118e9565b94509450505050610830565b8251604014156115fc57602083015160408401516115f18683836119d6565b935093505050610830565b50600090506002610830565b600081600481111561162a57634e487b7160e01b600052602160045260246000fd5b14156116335750565b600181600481111561165557634e487b7160e01b600052602160045260246000fd5b14156116a35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610911565b60028160048111156116c557634e487b7160e01b600052602160045260246000fd5b14156117135760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610911565b600381600481111561173557634e487b7160e01b600052602160045260246000fd5b141561178e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610911565b60048160048111156117b057634e487b7160e01b600052602160045260246000fd5b14156118095760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610911565b50565b6002546001600160a01b03831661183557604051622e076360e81b815260040160405180910390fd5b816118535760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038316600081815260076020526040902080546801000000000000000185020190554260a01b6001841460e11b1717600082815260066020526040902055808281015b6040516001830192906001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821061189d5760025550505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561192057506000905060036119cd565b8460ff16601b1415801561193857508460ff16601c14155b1561194957506000905060046119cd565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561199d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119c6576000600192509250506119cd565b9150600090505b94509492505050565b6000806001600160ff1b038316816119f360ff86901c601b6120a5565b9050611a01878288856118e9565b935093505050935093915050565b828054611a1b90612128565b90600052602060002090601f016020900481019282611a3d5760008555611a83565b82601f10611a5657805160ff1916838001178555611a83565b82800160010185558215611a83579182015b82811115611a83578251825591602001919060010190611a68565b50611a8f929150611a93565b5090565b5b80821115611a8f5760008155600101611a94565b6000611abb611ab68461207d565b61204c565b9050828152838383011115611acf57600080fd5b828260208301376000602084830101529392505050565b600082601f830112611af6578081fd5b61125083833560208501611aa8565b600060208284031215611b16578081fd5b81356112508161218f565b600060208284031215611b32578081fd5b81516112508161218f565b60008060408385031215611b4f578081fd5b8235611b5a8161218f565b91506020830135611b6a8161218f565b809150509250929050565b600080600060608486031215611b89578081fd5b8335611b948161218f565b92506020840135611ba48161218f565b929592945050506040919091013590565b60008060008060808587031215611bca578081fd5b8435611bd58161218f565b93506020850135611be58161218f565b925060408501359150606085013567ffffffffffffffff811115611c07578182fd5b8501601f81018713611c17578182fd5b611c2687823560208401611aa8565b91505092959194509250565b60008060408385031215611c44578182fd5b8235611c4f8161218f565b915060208301358015158114611b6a578182fd5b60008060008060608587031215611c78578384fd5b8435611c838161218f565b9350602085013567ffffffffffffffff80821115611c9f578485fd5b611cab88838901611ae6565b94506040870135915080821115611cc0578384fd5b818701915087601f830112611cd3578384fd5b813581811115611ce1578485fd5b886020828501011115611cf2578485fd5b95989497505060200194505050565b60008060408385031215611d13578182fd5b8235611d1e8161218f565b946020939093013593505050565b60008060408385031215611d3e578182fd5b8251611d498161218f565b60208401519092506001600160601b0381168114611b6a578182fd5b600060208284031215611d76578081fd5b8135611250816121a4565b600060208284031215611d92578081fd5b8151611250816121a4565b600060208284031215611dae578081fd5b813567ffffffffffffffff811115611dc4578182fd5b61101f84828501611ae6565b600060208284031215611de1578081fd5b815167ffffffffffffffff811115611df7578182fd5b8201601f81018413611e07578182fd5b8051611e15611ab68261207d565b818152856020838501011115611e29578384fd5b611e3a8260208301602086016120fc565b95945050505050565b600060208284031215611e54578081fd5b5035919050565b60008060408385031215611e6d578182fd5b50508035926020909101359150565b60008151808452611e948160208601602086016120fc565b601f01601f19169290920160200192915050565b60006001600160601b0319808660601b1683528451611ece8160148601602089016120fc565b60609490941b169190920160148101919091526028019392505050565b60008351611efd8184602088016120fc565b835190830190611f118183602088016120fc565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611f4d90830184611e7c565b9695505050505050565b6020815260006112506020830184611e7c565b604081526000611f7d6040830185611e7c565b60208382038185015282855484600182811c915080831680611fa057607f831692505b858310811415611fbe57634e487b7160e01b88526022600452602488fd5b828752602087019650808015611fdb5760018114611fec57612016565b60ff19851688528688019550612016565b60008b815260209020895b858110156120105781548a820152908401908801611ff7565b89019650505b50939a9950505050505050505050565b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561207557612075612179565b604052919050565b600067ffffffffffffffff82111561209757612097612179565b50601f01601f191660200190565b600082198211156120b8576120b8612163565b500190565b6000826120d857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156120f7576120f7612163565b500290565b60005b838110156121175781810151838201526020016120ff565b83811115610e155750506000910152565b600181811c9082168061213c57607f821691505b6020821081141561215d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461180957600080fd5b6001600160e01b03198116811461180957600080fdfea2646970667358221220cbd76351345d2e9894895028339f07626e1f4afa8d041d90b62dfec175d73a5b64736f6c63430008040033a26469706673582212209227a5cc9d6a7e8d0c94a5aec7212dbbe9396b7be87af6710cae02362ef5b17a64736f6c63430008040033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000935760003560e01c80638da5cb5b11620000625780638da5cb5b1462000102578063c4d66de81462000114578063df9ce002146200012b578063f2fde38b146200016257600080fd5b806333eaa20c14620000985780634356bd9e14620000c857806344ae70d814620000e1578063715018a614620000f8575b600080fd5b606754620000ac906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b620000df620000d936600462000932565b62000179565b005b620000df620000f236600462000995565b62000234565b620000df6200052d565b6033546001600160a01b0316620000ac565b620000df6200012536600462000932565b62000545565b620000ac6200013c36600462000956565b80516020818301810180516066825292820191909301209152546001600160a01b031681565b620000df6200017336600462000932565b620006d3565b6200018362000752565b6001600160a01b038116620001d15760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064015b60405180910390fd5b606780546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f59f321e63e0bdeefb4c7efac954b9e53e8f069d9b1f6b8ac3ad03c7178b5efa5910160405180910390a25050565b600081116200027b5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a59081b5a5b9d081b1a5b5a5d60721b6044820152606401620001c8565b60006001600160a01b031660668660405162000298919062000a7e565b908152604051908190036020019020546001600160a01b031614620002f95760405162461bcd60e51b8152602060048201526016602482015275135bd9195b081251081a185cc81899595b881d5cd95960521b6044820152606401620001c8565b6001600160a01b038416620003515760405162461bcd60e51b815260206004820152601860248201527f496e76616c69642064657369676e6572206164647265737300000000000000006044820152606401620001c8565b6001600160a01b038316620003a95760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420726f79616c747920726563656976657220616464726573736044820152606401620001c8565b85858286606760009054906101000a90046001600160a01b0316604051620003d19062000878565b620003e195949392919062000a9c565b604051809103906000f080158015620003fe573d6000803e3d6000fd5b50606580546001600160a01b0319166001600160a01b039290921691821790556040516066906200043190889062000a7e565b90815260405190819003602001812080546001600160a01b039384166001600160a01b031990911617905560675460655463647a5c8560e01b8352831660048301526bffffffffffffffffffffffff8516602483015285831660448301529091169063647a5c8590606401600060405180830381600087803b158015620004b757600080fd5b505af1158015620004cc573d6000803e3d6000fd5b5050505084604051620004e0919062000a7e565b6040519081900381206065546001600160a01b03168252907fe6248a7d8f06d4dc9c3d4c896b3462838d9c7422ecf0b07df2de587aca9ebab29060200160405180910390a2505050505050565b6200053762000752565b620005436000620007ae565b565b600054610100900460ff1615808015620005665750600054600160ff909116105b80620005825750303b15801562000582575060005460ff166001145b620005e75760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620001c8565b6000805460ff1916600117905580156200060b576000805461ff0019166101001790555b6001600160a01b038216620006635760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420726f79616c747920616464726573730000000000000000006044820152606401620001c8565b606780546001600160a01b0319166001600160a01b0384161790556200068862000800565b8015620006cf576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b620006dd62000752565b6001600160a01b038116620007445760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001c8565b6200074f81620007ae565b50565b6033546001600160a01b03163314620005435760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401620001c8565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166200086d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401620001c8565b6200054333620007ae565b61257e8062000b3783390190565b80356001600160a01b03811681146200089e57600080fd5b919050565b600082601f830112620008b4578081fd5b813567ffffffffffffffff80821115620008d257620008d262000b20565b604051601f8301601f19908116603f01168101908282118183101715620008fd57620008fd62000b20565b8160405283815286602085880101111562000916578485fd5b8360208701602083013792830160200193909352509392505050565b60006020828403121562000944578081fd5b6200094f8262000886565b9392505050565b60006020828403121562000968578081fd5b813567ffffffffffffffff8111156200097f578182fd5b6200098d84828501620008a3565b949350505050565b60008060008060008060c08789031215620009ae578182fd5b863567ffffffffffffffff80821115620009c6578384fd5b620009d48a838b01620008a3565b97506020890135915080821115620009ea578384fd5b50620009f989828a01620008a3565b95505062000a0a6040880162000886565b935062000a1a6060880162000886565b925060808701356bffffffffffffffffffffffff8116811462000a3b578283fd5b8092505060a087013590509295509295509295565b6000815180845262000a6a81602086016020860162000aed565b601f01601f19169290920160200192915050565b6000825162000a9281846020870162000aed565b9190910192915050565b60a08152600062000ab160a083018862000a50565b828103602084015262000ac5818862000a50565b604084019690965250506001600160a01b039283166060820152911660809091015292915050565b60005b8381101562000b0a57818101518382015260200162000af0565b8381111562000b1a576000848401525b50505050565b634e487b7160e01b600052604160045260246000fdfe60806040523480156200001157600080fd5b506040516200257e3803806200257e833981016040819052620000349162000295565b8451859085906200004d9060049060208501906200011f565b508051620000639060059060208401906200011f565b506000600281905550505062000084816200011060201b620011851760201c565b620000d55760405162461bcd60e51b815260206004820181905260248201527f496e76616c696420726f79616c74792072656769737472792061646472657373604482015260640160405180910390fd5b600a92909255600c80546001600160a01b039283166001600160a01b031991821617909155600d8054929093169116179055506200037e9050565b6001600160a01b03163b151590565b8280546200012d906200032b565b90600052602060002090601f0160209004810192826200015157600085556200019c565b82601f106200016c57805160ff19168380011785556200019c565b828001600101855582156200019c579182015b828111156200019c5782518255916020019190600101906200017f565b50620001aa929150620001ae565b5090565b5b80821115620001aa5760008155600101620001af565b80516001600160a01b0381168114620001dd57600080fd5b919050565b600082601f830112620001f3578081fd5b81516001600160401b038082111562000210576200021062000368565b604051601f8301601f19908116603f011681019082821181831017156200023b576200023b62000368565b8160405283815260209250868385880101111562000257578485fd5b8491505b838210156200027a57858201830151818301840152908201906200025b565b838211156200028b57848385830101525b9695505050505050565b600080600080600060a08688031215620002ad578081fd5b85516001600160401b0380821115620002c4578283fd5b620002d289838a01620001e2565b96506020880151915080821115620002e8578283fd5b50620002f788828901620001e2565b945050604086015192506200030f60608701620001c5565b91506200031f60808701620001c5565b90509295509295909350565b600181811c908216806200034057607f821691505b602082108114156200036257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6121f0806200038e6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063a2bde876116100a2578063c87b56dd11610071578063c87b56dd146103d1578063ce9c751c146103e4578063e8a3d485146103f7578063e985e9c5146103ff57600080fd5b8063a2bde87614610375578063afc6ef6014610388578063b88d4fde146103ab578063c1b0e91f146103be57600080fd5b806395d89b41116100de57806395d89b411461033e578063996517cf14610346578063a11b07121461034f578063a22cb4651461036257600080fd5b806370a08231146103105780638d75533f146103235780638da5cb5b1461033657600080fd5b806342842e0e116101715780636352211e1161014b5780636352211e146102da578063699bff80146102ed5780636c0360eb146102f55780636c8b703f146102fd57600080fd5b806342842e0e146102ac578063481c6a75146102bf57806355f804b3146102c757600080fd5b8063095ea7b3116101ad578063095ea7b31461023c57806318160ddd1461025157806323b872dd146102675780632a55205a1461027a57600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611d65565b61043b565b60405190151581526020015b60405180910390f35b610204610466565b6040516101f39190611f57565b61022461021f366004611e43565b6104f8565b6040516001600160a01b0390911681526020016101f3565b61024f61024a366004611d01565b61053c565b005b600354600254035b6040519081526020016101f3565b61024f610275366004611b75565b6105dc565b61028d610288366004611e5b565b61076d565b604080516001600160a01b0390931683526020830191909152016101f3565b61024f6102ba366004611b75565b610837565b610224610857565b61024f6102d5366004611d9d565b6108d9565b6102246102e8366004611e43565b610a07565b610224610a12565b610204610a57565b61020461030b366004611e43565b610a61565b61025961031e366004611b05565b610afb565b61024f610331366004611c63565b610b4a565b610224610ce7565b610204610d2c565b610259600a5481565b600d54610224906001600160a01b031681565b61024f610370366004611c32565b610d3b565b600c54610224906001600160a01b031681565b6101e7610396366004611b05565b600e6020526000908152604090205460ff1681565b61024f6103b9366004611bb5565b610dd1565b61024f6103cc366004611b05565b610e1b565b6102046103df366004611e43565b610ee0565b61024f6103f2366004611b05565b611027565b610204611104565b6101e761040d366004611b3d565b6001600160a01b03918216600090815260096020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663152a902d60e11b1480610460575061046082611194565b92915050565b60606004805461047590612128565b80601f01602080910402602001604051908101604052809291908181526020018280546104a190612128565b80156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b5050505050905090565b6000610503826111e2565b610520576040516333d1c03960e21b815260040160405180910390fd5b506000908152600860205260409020546001600160a01b031690565b600061054782610a07565b9050336001600160a01b0382161461058057610563813361040d565b610580576040516367d9dca160e11b815260040160405180910390fd5b60008281526008602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006105e78261120a565b9050836001600160a01b0316816001600160a01b03161461061a5760405162a1148160e81b815260040160405180910390fd5b60008281526008602052604090208054338082146001600160a01b038816909114176106675761064a863361040d565b61066757604051632ce44b5f60e11b815260040160405180910390fd5b6001600160a01b03851661068e57604051633a954ecd60e21b815260040160405180910390fd5b801561069957600082555b6001600160a01b038681166000908152600760205260408082208054600019019055918716808252919020805460010190554260a01b17600160e11b17600085815260066020526040902055600160e11b831661072457600184016000818152600660205260409020546107225760025481146107225760008181526006602052604090208490555b505b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b600d54604051630dda81bd60e21b81523060048201526000918291829182916001600160a01b039091169063376a06f490602401604080518083038186803b1580156107b857600080fd5b505afa1580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190611d2c565b9150915060006107ff61271090565b6001600160601b0316826001600160601b03168761081d91906120dd565b61082791906120bd565b92945091925050505b9250929050565b61085283838360405180602001604052806000815250610dd1565b505050565b600d5460408051639fdf846960e01b815290516000926001600160a01b031691639fdf8469916004808301926020929190829003018186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190611b21565b905090565b6108e1610857565b6001600160a01b0316336001600160a01b03161461091a5760405162461bcd60e51b815260040161091190612026565b60405180910390fd5b6000600b805461092990612128565b80601f016020809104026020016040519081016040528092919081815260200182805461095590612128565b80156109a25780601f10610977576101008083540402835291602001916109a2565b820191906000526020600020905b81548152906001019060200180831161098557829003601f168201915b505085519394506109be93600b93506020870192509050611a0f565b50336001600160a01b03167f8e35157d9201b105014f0dd31c15c7476a6e82fab53da589eeb184e4927a5d4282600b6040516109fb929190611f6a565b60405180910390a25050565b60006104608261120a565b600d54604080516356c2756560e11b815290516000926001600160a01b03169163ad84eaca916004808301926020929190829003018186803b15801561089c57600080fd5b60606108d4611272565b600f6020526000908152604090208054610a7a90612128565b80601f0160208091040260200160405190810160405280929190818152602001828054610aa690612128565b8015610af35780601f10610ac857610100808354040283529160200191610af3565b820191906000526020600020905b815481529060010190602001808311610ad657829003601f168201915b505050505081565b60006001600160a01b038216610b24576040516323d3ad8160e21b815260040160405180910390fd5b506001600160a01b031660009081526007602052604090205467ffffffffffffffff1690565b336000908152600e602052604090205460ff1615610ba25760405162461bcd60e51b81526020600482015260156024820152741059191c995cdcc81a185cc81899595b881d5cd959605a1b6044820152606401610911565b610c0c338430604051602001610bba93929190611ea8565b6040516020818303038152906040528051906020012083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061128192505050565b610c4c5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b6044820152606401610911565b6000610c5b6003546002540390565b9050600a548110610cae5760405162461bcd60e51b815260206004820152601e60248201527f4d6178696d756d206c696d697420686173206265656e207265616368656400006044820152606401610911565b336000908152600e60205260409020805460ff19166001908117909155610cd690869061130a565b610ce08185611328565b5050505050565b600d546040805163df727d3b60e01b815290516000926001600160a01b03169163df727d3b916004808301926020929190829003018186803b15801561089c57600080fd5b60606005805461047590612128565b6001600160a01b038216331415610d655760405163b06307db60e01b815260040160405180910390fd5b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610ddc8484846105dc565b6001600160a01b0383163b15610e1557610df884848484611347565b610e15576040516368d2bf6b60e11b815260040160405180910390fd5b50505050565b600c546001600160a01b03163314610e455760405162461bcd60e51b815260040161091190612026565b6001600160a01b038116610e8d5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610911565b600c80546001600160a01b038381166001600160a01b031983168117909355604051928352169081907fe4a71635009c69af0c606c5d16f7ccaaf06ff0d5d072216bd8f030383dde9e61906020016109fb565b6060610eeb826111e2565b610f2e5760405162461bcd60e51b8152602060048201526014602482015273151bdad95b88191bd95cc81b9bdd08195e1a5cdd60621b6044820152606401610911565b6000828152600f602052604081208054610f4790612128565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7390612128565b8015610fc05780601f10610f9557610100808354040283529160200191610fc0565b820191906000526020600020905b815481529060010190602001808311610fa357829003601f168201915b505050505090506000610fd1611272565b9050805160001415610fe4575092915050565b815115611016578082604051602001610ffe929190611eeb565b60405160208183030381529060405292505050919050565b61101f8461143e565b949350505050565b61102f610857565b6001600160a01b0316336001600160a01b03161461105f5760405162461bcd60e51b815260040161091190612026565b6001600160a01b0381163b6110a85760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610911565b600d80546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935233917f59f321e63e0bdeefb4c7efac954b9e53e8f069d9b1f6b8ac3ad03c7178b5efa591016109fb565b600d5460408051635af72f4760e01b815290516060926001600160a01b031691635af72f47916004808301926000929190829003018186803b15801561114957600080fd5b505afa15801561115d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108d49190810190611dd0565b6001600160a01b03163b151590565b60006301ffc9a760e01b6001600160e01b0319831614806111c557506380ac58cd60e01b6001600160e01b03198316145b806104605750506001600160e01b031916635b5e139f60e01b1490565b600060025482108015610460575050600090815260066020526040902054600160e01b161590565b60008160025481101561125957600081815260066020526040902054600160e01b8116611257575b80611250575060001901600081815260066020526040902054611232565b9392505050565b505b604051636f96cda160e11b815260040160405180910390fd5b6060600b805461047590612128565b6000806112db846040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90506112e5610a12565b6001600160a01b03166112f882856114c2565b6001600160a01b031614949350505050565b6113248282604051806020016040528060008152506114e6565b5050565b6000828152600f60209081526040909120825161085292840190611a0f565b604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a029061137c903390899088908890600401611f1a565b602060405180830381600087803b15801561139657600080fd5b505af19250505080156113c6575060408051601f3d908101601f191682019092526113c391810190611d81565b60015b611421573d8080156113f4576040519150601f19603f3d011682016040523d82523d6000602084013e6113f9565b606091505b508051611419576040516368d2bf6b60e11b815260040160405180910390fd5b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050949350505050565b6060611449826111e2565b61146657604051630a14c4b560e41b815260040160405180910390fd5b6000611470611272565b90508051600014156114915760405180602001604052806000815250611250565b8061149b8461154c565b6040516020016114ac929190611eeb565b6040516020818303038152906040529392505050565b60008060006114d1858561159b565b915091506114de81611608565b509392505050565b6114f0838361180c565b6001600160a01b0383163b15610852576002548281035b61151a6000868380600101945086611347565b611537576040516368d2bf6b60e11b815260040160405180910390fd5b818110611507578160025414610ce057600080fd5b604080516080810191829052607f0190826030600a8206018353600a90045b801561158957600183039250600a81066030018353600a900461156b565b50819003601f19909101908152919050565b6000808251604114156115d25760208301516040840151606085015160001a6115c6878285856118e9565b94509450505050610830565b8251604014156115fc57602083015160408401516115f18683836119d6565b935093505050610830565b50600090506002610830565b600081600481111561162a57634e487b7160e01b600052602160045260246000fd5b14156116335750565b600181600481111561165557634e487b7160e01b600052602160045260246000fd5b14156116a35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610911565b60028160048111156116c557634e487b7160e01b600052602160045260246000fd5b14156117135760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610911565b600381600481111561173557634e487b7160e01b600052602160045260246000fd5b141561178e5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610911565b60048160048111156117b057634e487b7160e01b600052602160045260246000fd5b14156118095760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610911565b50565b6002546001600160a01b03831661183557604051622e076360e81b815260040160405180910390fd5b816118535760405163b562e8dd60e01b815260040160405180910390fd5b6001600160a01b038316600081815260076020526040902080546801000000000000000185020190554260a01b6001841460e11b1717600082815260066020526040902055808281015b6040516001830192906001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a480821061189d5760025550505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561192057506000905060036119cd565b8460ff16601b1415801561193857508460ff16601c14155b1561194957506000905060046119cd565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561199d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166119c6576000600192509250506119cd565b9150600090505b94509492505050565b6000806001600160ff1b038316816119f360ff86901c601b6120a5565b9050611a01878288856118e9565b935093505050935093915050565b828054611a1b90612128565b90600052602060002090601f016020900481019282611a3d5760008555611a83565b82601f10611a5657805160ff1916838001178555611a83565b82800160010185558215611a83579182015b82811115611a83578251825591602001919060010190611a68565b50611a8f929150611a93565b5090565b5b80821115611a8f5760008155600101611a94565b6000611abb611ab68461207d565b61204c565b9050828152838383011115611acf57600080fd5b828260208301376000602084830101529392505050565b600082601f830112611af6578081fd5b61125083833560208501611aa8565b600060208284031215611b16578081fd5b81356112508161218f565b600060208284031215611b32578081fd5b81516112508161218f565b60008060408385031215611b4f578081fd5b8235611b5a8161218f565b91506020830135611b6a8161218f565b809150509250929050565b600080600060608486031215611b89578081fd5b8335611b948161218f565b92506020840135611ba48161218f565b929592945050506040919091013590565b60008060008060808587031215611bca578081fd5b8435611bd58161218f565b93506020850135611be58161218f565b925060408501359150606085013567ffffffffffffffff811115611c07578182fd5b8501601f81018713611c17578182fd5b611c2687823560208401611aa8565b91505092959194509250565b60008060408385031215611c44578182fd5b8235611c4f8161218f565b915060208301358015158114611b6a578182fd5b60008060008060608587031215611c78578384fd5b8435611c838161218f565b9350602085013567ffffffffffffffff80821115611c9f578485fd5b611cab88838901611ae6565b94506040870135915080821115611cc0578384fd5b818701915087601f830112611cd3578384fd5b813581811115611ce1578485fd5b886020828501011115611cf2578485fd5b95989497505060200194505050565b60008060408385031215611d13578182fd5b8235611d1e8161218f565b946020939093013593505050565b60008060408385031215611d3e578182fd5b8251611d498161218f565b60208401519092506001600160601b0381168114611b6a578182fd5b600060208284031215611d76578081fd5b8135611250816121a4565b600060208284031215611d92578081fd5b8151611250816121a4565b600060208284031215611dae578081fd5b813567ffffffffffffffff811115611dc4578182fd5b61101f84828501611ae6565b600060208284031215611de1578081fd5b815167ffffffffffffffff811115611df7578182fd5b8201601f81018413611e07578182fd5b8051611e15611ab68261207d565b818152856020838501011115611e29578384fd5b611e3a8260208301602086016120fc565b95945050505050565b600060208284031215611e54578081fd5b5035919050565b60008060408385031215611e6d578182fd5b50508035926020909101359150565b60008151808452611e948160208601602086016120fc565b601f01601f19169290920160200192915050565b60006001600160601b0319808660601b1683528451611ece8160148601602089016120fc565b60609490941b169190920160148101919091526028019392505050565b60008351611efd8184602088016120fc565b835190830190611f118183602088016120fc565b01949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611f4d90830184611e7c565b9695505050505050565b6020815260006112506020830184611e7c565b604081526000611f7d6040830185611e7c565b60208382038185015282855484600182811c915080831680611fa057607f831692505b858310811415611fbe57634e487b7160e01b88526022600452602488fd5b828752602087019650808015611fdb5760018114611fec57612016565b60ff19851688528688019550612016565b60008b815260209020895b858110156120105781548a820152908401908801611ff7565b89019650505b50939a9950505050505050505050565b6020808252600c908201526b155b985d5d1a1bdc9a5e995960a21b604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561207557612075612179565b604052919050565b600067ffffffffffffffff82111561209757612097612179565b50601f01601f191660200190565b600082198211156120b8576120b8612163565b500190565b6000826120d857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156120f7576120f7612163565b500290565b60005b838110156121175781810151838201526020016120ff565b83811115610e155750506000910152565b600181811c9082168061213c57607f821691505b6020821081141561215d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461180957600080fd5b6001600160e01b03198116811461180957600080fdfea2646970667358221220cbd76351345d2e9894895028339f07626e1f4afa8d041d90b62dfec175d73a5b64736f6c63430008040033a26469706673582212209227a5cc9d6a7e8d0c94a5aec7212dbbe9396b7be87af6710cae02362ef5b17a64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeFactoryRoyaltyRegistry(address)": {
        "details": "Update the royalty registry address.",
        "params": {
          "_royaltyRegistry": "new royalty registry address."
        }
      },
      "createModelNFT(string,string,address,address,uint96,uint256)": {
        "details": "Create new model NFT smart contract with parameters.",
        "params": {
          "_designer": "Address of designer.",
          "_mintLimit": "upper limit of minting.",
          "_modelID": "ID of model.",
          "_modelName": "name of model.",
          "_royaltyRate": "royalty Rate",
          "_royaltyReceiver": "Address of royalty receiver."
        }
      },
      "initialize(address)": {
        "details": "initialization function for proxy.",
        "params": {
          "_royaltyRegistry": "royalty registry address."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "factoryRoyaltyRegistry": {
        "details": "royalty registry address that store the royalty info."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/ModelNFTFactory.sol:ModelNFTFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/ModelNFTFactory.sol:ModelNFTFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/ModelNFTFactory.sol:ModelNFTFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ModelNFTFactory.sol:ModelNFTFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/ModelNFTFactory.sol:ModelNFTFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3180,
        "contract": "contracts/ModelNFTFactory.sol:ModelNFTFactory",
        "label": "_modelNFT",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(ModelNFT)3170"
      },
      {
        "astId": 3184,
        "contract": "contracts/ModelNFTFactory.sol:ModelNFTFactory",
        "label": "modelNFTs",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 3188,
        "contract": "contracts/ModelNFTFactory.sol:ModelNFTFactory",
        "label": "factoryRoyaltyRegistry",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IRoyaltyRegistry)3419"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRoyaltyRegistry)3419": {
        "encoding": "inplace",
        "label": "contract IRoyaltyRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ModelNFT)3170": {
        "encoding": "inplace",
        "label": "contract ModelNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}